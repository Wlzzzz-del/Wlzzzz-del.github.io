<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>浅谈PageRank算法以及实现</title>
    <link href="/2021/04/15/google-PageRank%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/04/15/google-PageRank%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>网络就像是一张图，网页作为节点，链接作为边。当我们想要对网页进行排名，如此多的网页如何实现呢？于是google公司基于链接投票法开发了PageRank算法用于搜索引擎对网页进行排名。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><ul><li>每个链接的投票作用于他的源页面</li><li>如果页面$j$有$n$个出链，那么每个出链会获得$r_j/n$张票</li><li>页面$j$的个人重要度是所有他的入链的票数之和<br>根据以上的理论基础我们可以推出:</li><li>一张来自重要度很高的页面的票也同样很重要</li><li>如果一个页面被其他重要度很高的页面所链接，那么这个页面的重要度也很高</li></ul><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>因此我们定义一个排名分数$r_j$作为页面$j$的排名分数:<br>$$r_j=\Sigma_{i-&gt;j}r_i/d_i$$<br>($d_i$指的是节点i的度)  </p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>(此处加入例子的图片page21)<br>在以上的图中，三个节点的分数$r_j$分别为<br>$$r_y = r_y/2+r_a/2$$  </p><p>$$r_a=r_y/2+r_m$$</p><p>$$r_m=r_a/2$$</p><h1 id="基础公式"><a href="#基础公式" class="headerlink" title="基础公式"></a>基础公式</h1><p>知道了如何计算，我们应该抽象出适用于大型图计算的公式！  </p><h2 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h2><p>随机矩阵$M$<br>假设网页$i$有$d_i$个出链<br>如果$i-&gt;j$ ,那么就设$M_{ji}=1/d_i$ 否则$M_{ji}=0$<br>M是一个随机矩阵，每一列的和为1<br>$r_i$是一列存储网页$i$重要性分数的向量<br>$$\Sigma_{i}r_i = 1$$<br>实际上$r$是$M$的特征向量<br>那么排名运算可以写成$r = M * r$<br>(此处加入例子图片page25)</p><h1 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h1><ul><li><strong><em>输入</em></strong>:  一个包含N个网页节点网络图的随机矩阵M</li><li><strong><em>初始化分数矩阵</em></strong>:  $r^{0} = [1/N,…,1/N]^T$</li><li><strong><em>循环计算</em></strong>:  $r^(t+1)=M*r^(t)$</li><li><strong><em>直到收敛</em></strong>:  $|r^(t+1)-r^(t)|_1&lt;\epsilon$</li><li><strong><em>输出r（排名结果）</em></strong></li></ul><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>(此处加入p37图片)<br>以上就是PageRank算法的全部流程，但是实际上还存在一些问题</p><h2 id="死胡同-dead-end"><a href="#死胡同-dead-end" class="headerlink" title="死胡同(dead end)"></a>死胡同(dead end)</h2><p>死胡同现象指的是一些网页不存在出链，这会导致：</p><ol><li>随机矩阵的步骤无处可去</li><li>导致一些重要的网页分数$r_j$降低</li></ol><h2 id="蜘蛛陷阱"><a href="#蜘蛛陷阱" class="headerlink" title="蜘蛛陷阱"></a>蜘蛛陷阱</h2><p>蜘蛛陷阱是指所有的出链都在一个社区内，这会导致：</p><ol><li>随机矩阵运算时在社区内会大幅下降</li><li>最终这个社区内的所有节点都有特别高的排名分数<br>实际上蜘蛛陷阱并不是一个问题，但他会对排名分数产生影响导致最终的排名不是我们所期望得到的..</li></ol><h2 id="解决蜘蛛陷阱问题"><a href="#解决蜘蛛陷阱问题" class="headerlink" title="解决蜘蛛陷阱问题"></a>解决蜘蛛陷阱问题</h2><p>(此处加入p40的图)<br>就像人们平时浏览网页一样，虽然一个网页有许多出链，但实际上并不会每个网页都浏览。虽然一个网页没有被链接，但是有可能会通过地址访问。<br>google解决蜘蛛陷阱的方法来源于此，在运算时加入随机参数$\beta$,对每个节点计算时:</p><ul><li>有$\beta$的概率浏览出链的网页</li><li>有$1-\beta$的概率浏览非出链的网页  </li><li>$\beta$介于0.8到0.9之间<br>通过调整后，一个社区内的节点也有可能在某次循环中访问到社区外的节点。</li></ul><h2 id="解决死胡同问题"><a href="#解决死胡同问题" class="headerlink" title="解决死胡同问题"></a>解决死胡同问题</h2><p>(此处加入p41的图）<br>对该矩阵$M$中该节点所在的行，给所有节点赋予$1/n$的值</p><h2 id="公式的优化"><a href="#公式的优化" class="headerlink" title="公式的优化"></a>公式的优化</h2><p>那么基于以上两个问题的解决方法，我们可以推导出新的公式:<br>旧的计算公式:<br>$$r_j=\Sigma_{i-&gt;j}r_i/d_i$$<br>新的计算公式：<br>$$r_j=\Sigma_{i-&gt;j}\beta*r_i/d_i+(1-\beta)*1/N$$  </p><p>于是我们得出一个新的矩阵  </p><p>$$A=\beta<em>M+(1-\beta)</em>[1/N]_{N*N}$$  </p><p>因此我们计算时只需要循环计算  </p><p>$$r=A*r$$  </p><p>最终收敛即可得到结果  </p><h1 id="实际运算该如何优化算法"><a href="#实际运算该如何优化算法" class="headerlink" title="实际运算该如何优化算法"></a>实际运算该如何优化算法</h1><p>那么google是如何进行实际的运算呢?整个算法最核心的步骤就是**<em>矩阵乘法**</em>。<br>如果我们有足够大的内存空间可以存取矩阵 $A,r^{old},r^{new}$.<br>假设我们有一个包含10亿个节点的矩阵  </p><ul><li>我们需要四位用来存储每个记录</li><li>对于矩阵来说有20亿个记录，需要8GB</li><li>矩阵$A$需要存储$N^2$个记录,$10^18$如此庞大的数据内存根本装不下。<h2 id="从算法公式对算法进行优化"><a href="#从算法公式对算法进行优化" class="headerlink" title="从算法公式对算法进行优化"></a>从算法公式对算法进行优化</h2>推导：</li></ul><p>$$r = A<em>r, A_{ji}=\beta</em>M_{ji}+{1-\beta}/N$$  </p><p>$$r_j=\Sigma^{N}<em>{i=1}A</em>{ji}*r_i$$  </p><p>$$r_j=\Sigma^{N}<em>{i=1}[\beta*M</em>{ji}+{1-\beta}/N]*r_i$$  </p><p>$$r_j=\Sigma^{N}<em>{i=1}\beta*M</em>{ji}<em>r_i+{1-\beta}/N</em>\Sigma^{N}_{i=1}r_i$$  </p><p>$$r_j=\Sigma^{N}<em>{i=1}\beta*M</em>{ji}<em>r_i+{1-\beta}/N</em>$$  </p><p>通过推导我们将公式化简为</p><p>$$r=\beta<em>M</em>r+[{1-\beta}/N]_N$$  </p><p>在新的公式中，我们只需  </p><ul><li>计算 $r^{new}=b\eta<em>M</em>r^{old}$  </li><li>把 $r^{new}$加上$(1-\beta)/N$<br>但即使是优化到如此地步，我们仍然需要足够的内存能够存储$M$矩阵。那么我们能不能对$M$矩阵的存储进行优化？</li></ul><h2 id="M-矩阵的优化"><a href="#M-矩阵的优化" class="headerlink" title="$M$矩阵的优化"></a>$M$矩阵的优化</h2><p>原始的$M$矩阵类似于邻接矩阵，我们只需要$o(1)$的时间复杂度就可以判断某个边是否存在,但是我们算法的核心并不在于此,因此我们需要对数据结构进行修改。<br>(插入优化图p52)<br>实际上我们只需要存储节点的源、度、目标三个数据即可，因此我们用一个$N*3$的矩阵存储这些数据,第一维度存储source，第二维度存储degree，第三维度存储destination.<br>在这样的数据结构下，算法的流程可以写成:</p><ol><li>初始化所有节点的$r^{new}=(1-\beta)/N$</li><li>对每个节点: </li></ol><ul><li>将source,degree,destination读入内存</li><li>对每个destination:</li><li>计算$r^{new}(dest_j) += \beta*r^{old}(i)/d_j$  </li></ul><p>但是由于数据量过大，即便是这样的矩阵存储，我们也没有足够的RAM可以用来存放。  </p><h2 id="如何解决存放的问题？"><a href="#如何解决存放的问题？" class="headerlink" title="如何解决存放的问题？"></a>如何解决存放的问题？</h2><p>由于内存空间不足，我们可以将数据存放在磁盘，并且在算法需要读取时使用读取函数进行访问和修改。<br>但是随之而来的问题是，如此庞大的数据文件如果进行频繁的读写实际上效率非常低,主要是因为每次访问都需要重新打开文件，并且访问到其他不需要的节点。</p><h2 id="解决读写效率低的问题"><a href="#解决读写效率低的问题" class="headerlink" title="解决读写效率低的问题"></a>解决读写效率低的问题</h2><p>我们可以对硬盘上的数据文件按照编号分块存储，以此提高读写速度和减少不必要的浪费。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>随机生成使用1 000/ 10 000/ 100 000个节点的图，每个节点随机地赋予6-16的出度  </p><h2 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h2><p><a href="https://github.com/Wlzzzz-del/PageRank">我的github仓库</a><br>在pagerank.py中没有对数据结构进行优化，仅存放在RAM上。<br>在new_pagerank1.py中我将表写入本地的json文件，每2000/100个节点的信息存为一个json文件（根据节点的多少修改）。<br>在算法执行的loop阶段使用函数对json文件进行读写。<br>原算法执行10000个节点运算需要大概几个小时，优化后10000个节点只需要26s.  </p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>复杂网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用selenium自动化登陆tb</title>
    <link href="/2021/01/25/%E4%BD%BF%E7%94%A8selenium%E8%87%AA%E5%8A%A8%E5%8C%96%E7%99%BB%E9%99%86tb%EF%BC%88%E6%9C%AA%E5%AE%8C%E5%96%84%EF%BC%89/"/>
    <url>/2021/01/25/%E4%BD%BF%E7%94%A8selenium%E8%87%AA%E5%8A%A8%E5%8C%96%E7%99%BB%E9%99%86tb%EF%BC%88%E6%9C%AA%E5%AE%8C%E5%96%84%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>前些日子学习了爬虫，尝试使用selenium自动化登陆淘宝，但淘宝现在的反爬虫技术能识别selenium等浏览器自动化使登陆界面出现滑块。根据网上的资料，可以在后台找出检测浏览器的js脚本进行屏蔽干扰，但本文没有完善这一功能。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>需要浏览器（本文使用chrome）</li><li>需要浏览器对应的驱动（需要自行下载，驱动版本与浏览器版本需要对应一致）</li><li>python3.6 + selenium  </li></ul><h1 id="简易的selenium教程"><a href="#简易的selenium教程" class="headerlink" title="简易的selenium教程"></a>简易的selenium教程</h1><h2 id="导入selenium库"><a href="#导入selenium库" class="headerlink" title="导入selenium库"></a>导入selenium库</h2><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<span class="hljs-keyword">import</span> time</code></pre><h2 id="配置浏览器选项"><a href="#配置浏览器选项" class="headerlink" title="配置浏览器选项"></a>配置浏览器选项</h2><p>首先是新建一个浏览器配置对象</p><pre><code class="hljs python">options = webdriver.ChromeOptions()options.add_argument(<span class="hljs-string">&#x27;headless&#x27;</span>)<span class="hljs-comment"># 使用后台进行浏览器模拟</span>options.add_argument(<span class="hljs-string">&#x27;--disable-gpu&#x27;</span>)<span class="hljs-comment"># 关闭gpu渲染</span>options.add_argument(<span class="hljs-string">&#x27;--proxy-server=http://&quot;+ip)# 使用ip进行模拟</span></code></pre><h2 id="创建浏览器对象"><a href="#创建浏览器对象" class="headerlink" title="创建浏览器对象"></a>创建浏览器对象</h2><pre><code class="hljs python">address = <span class="hljs-string">&#x27;./chromedriver.exe&#x27;</span><span class="hljs-comment"># chrome驱动</span>broswer = webdriver.Chrome(chrome_options = options, executable_path= address)<span class="hljs-comment"># 创建浏览器对象</span>time.sleep(<span class="hljs-number">1</span>)<span class="hljs-comment"># 设置操作间隔</span></code></pre><h2 id="进入页面并递交账号密码"><a href="#进入页面并递交账号密码" class="headerlink" title="进入页面并递交账号密码"></a>进入页面并递交账号密码</h2><p>selenium可以根据xpath、id等多种方式定位网页元素<br>使用浏览器选定所要的元素，右键检查，然后在出现html代码中右键即可复制xpath、id等信息</p><pre><code class="hljs python">id = <span class="hljs-string">&#x27;xxx&#x27;</span>password = <span class="hljs-string">&#x27;xxx&#x27;</span>url = <span class="hljs-string">&#x27;https://login.taobao.com/member/login.jhtml&#x27;</span><span class="hljs-comment"># 淘宝登陆的url</span>broswer.get(url)<span class="hljs-comment"># 进入登陆界面</span>broswer.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;login-form&quot;]/div[1]/div[2]&#x27;</span>).click()<span class="hljs-comment"># 定位登陆账号框</span>broswer.find_element_by_id(<span class="hljs-string">&#x27;fm-login-id&#x27;</span>).send_keys(id)<span class="hljs-comment"># 定位输入框，并输入id</span>broswer.find_element_by_id(<span class="hljs-string">&#x27;fm-login-password&#x27;</span>).send_keys(password)<span class="hljs-comment"># 定位输入框，并输入password</span><span class="hljs-comment"># 判断是否需要滑块</span><span class="hljs-keyword">if</span> broswer.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;nc_1__scale_text&quot;]/span&#x27;</span>):print(<span class="hljs-string">&quot;需要滑块&quot;</span>)broswer.close()<span class="hljs-comment"># 关闭浏览器</span></code></pre><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>现在各大互联网对爬虫的封杀十分严重，要绕过检测脚本只能通过后台屏蔽，或者使用requests爬虫，但是requests需要提交的密码进行了加密，即我们需要知道加密算法才能正确提交。</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬虫</tag>
      
      <tag>selenium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>map 与 unordered_map的基本用法及区别</title>
    <link href="/2020/12/30/map%E4%B8%8Eunordered_map/"/>
    <url>/2020/12/30/map%E4%B8%8Eunordered_map/</url>
    
    <content type="html"><![CDATA[<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>所有元素根据元素的键值key自动排序</li><li>每个元素都是&lt;key,value&gt;的键值对</li><li>不允许有键值相同的元素</li><li>key不能修改，但可以通过key修改与其对应的value</li><li>可以删除与value对应的键值key，重新插入以达到修改的目的<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2></li><li>有序性，这是map结构最大的优点，可以简化很多操作</li><li>红黑树，内部实现一个红黑树使得map很多操作可以在$log_n$复杂度下就可以实现，效率非常高<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2></li><li>空间占用率高，map内部实现了红黑树，虽然提高了运行效率，但是每个结点都需要额外保存父节点、孩子节点和红黑性质，使得每个结点都占用大量的空间</li></ul><h2 id="作用场景"><a href="#作用场景" class="headerlink" title="作用场景"></a>作用场景</h2><ul><li>字典</li><li>统计出现次数<br>##常用操作<pre><code class="hljs C++"><span class="hljs-comment">//初始化和插入</span><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">string</span>&gt; mymap = &#123;&#123;<span class="hljs-number">4</span>, <span class="hljs-string">&quot;张大&quot;</span>&#125;,&#123;<span class="hljs-number">5</span>, <span class="hljs-string">&quot;李五&quot;</span>&#125;&#125;;<span class="hljs-comment">//使用&#123;&#125;赋值</span>myMap[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;李四&quot;</span>;<span class="hljs-comment">//使用[]进行单个插入，若已经存在键值2,则赋值修改，若无则插入</span>myMap.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">string</span>&gt;(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;陈二&quot;</span>));<span class="hljs-comment">//使用insert和pair插入</span><span class="hljs-comment">//遍历输出+迭代器使用</span><span class="hljs-keyword">auto</span> iter= myMap.begin();<span class="hljs-comment">//auto自动识别迭代器类型为unordered_map&lt;int, string&gt;</span><span class="hljs-keyword">while</span>(iter!=myMap.end())&#123;  <span class="hljs-built_in">cout</span>&lt;&lt; iter-&gt;first &lt;&lt;<span class="hljs-string">&quot;,&quot;</span> &lt;&lt; iter-&gt;second &lt;&lt;<span class="hljs-built_in">endl</span>;++iter;&#125;<span class="hljs-comment">//查找元素并输出+迭代器的使用</span><span class="hljs-keyword">auto</span> iterator = myMap.find(<span class="hljs-number">2</span>);<span class="hljs-comment">//find返回一个指向2的迭代器</span><span class="hljs-keyword">if</span>((iterator != myMap.end())<span class="hljs-built_in">cout</span>&lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; iterator-&gt;first &lt;&lt;<span class="hljs-string">&quot;,&quot;</span> &lt;&lt;iterator-&gt;second&lt;&lt;<span class="hljs-built_in">endl</span>;system(<span class="hljs-string">&quot;pause&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</code></pre></li></ul><h1 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h1><h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h2><ul><li>内部实现了Hash_table，因此查找速度非常快<h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2></li><li>建立Hash_table耗费时间<h2 id="作用场景-1"><a href="#作用场景-1" class="headerlink" title="作用场景"></a>作用场景</h2></li><li>查找问题  </li></ul><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><p>与map类似</p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 字符串与数组</title>
    <link href="/2020/12/30/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B0%E7%BB%84/"/>
    <url>/2020/12/30/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串匹配问题"><a href="#字符串匹配问题" class="headerlink" title="字符串匹配问题"></a>字符串匹配问题</h1><h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute-Force"></a>Brute-Force</h2><p>顺序遍历母串，将每个字符作为匹配的起始字符，判断是否匹配字串。时间复杂度为$O(m*n)$。</p><h2 id="Rabin-Karp"><a href="#Rabin-Karp" class="headerlink" title="Rabin-Karp"></a>Rabin-Karp</h2><p>将每一个匹配字串映射为一个hash5值。例如，将子串看成是一个多进制数，比较它的值与母串中相同长度子串的hash值，如果相同，再细致地按照字符确认字符串是否确实相同。顺序计算母串hash值的过程中，使用增量计算的方法：扣除最高位的hash值，增加最低位的hash值。因此能在平均情况下做到$O(m+n)$</p><h3 id="什么是hash值"><a href="#什么是hash值" class="headerlink" title="什么是hash值"></a>什么是hash值</h3><p>散列函数(Hash Function)是一种从任何一种数据中创建小的数字”指纹”的方法。该函数将数据打乱混合，重新创建一个叫做散列值的指纹。相同数据的hash值相同。好的散列函数在输入域中很少出现散列冲突。</p><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><h2 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h2><ul><li>在Stack上定义长度为arraySize的整型数组<pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> <span class="hljs-built_in">array</span>[<span class="hljs-built_in">array</span>Size];</code></pre></li><li>在Heap上定义长度为arraySize的整型数组，使用完后需要释放内存<pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> *<span class="hljs-built_in">array</span> = new <span class="hljs-built_in">int</span>[<span class="hljs-built_in">array</span>Size];</code></pre>在heap中数组使用完后需要释放内存<pre><code class="hljs n1ql"><span class="hljs-keyword">delete</span>[] <span class="hljs-keyword">array</span>;</code></pre>注意，在旧的编译器中，不能在stack上定义一个长度不确定的数组，即只能定义如下：<pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> <span class="hljs-built_in">array</span>[<span class="hljs-number">10</span>];</code></pre>新的编译器没有如上限制。但是如果数组长度不定，则不能初始化数组<pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> <span class="hljs-built_in">array</span>[<span class="hljs-built_in">array</span>Size] = &#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//编译报错</span></code></pre><h2 id="关于stack"><a href="#关于stack" class="headerlink" title="关于stack"></a>关于stack</h2>stack主要是指由操作系统自动管理的内存空间。当进入一个函数，操作系统会为该函数中的局部变量分配储存空间。事实上，系统会分配一个内存块，叠加在当前stack上，并且利用指针指向前一个内存块的地址。<br>函数的局部变量就储存在当前的内存块上。当该函数返回时，系统“弹出”内存块，并且根据指针回到前一个内存块。所以，stack总是以后进先出的方式工作。<h2 id="关于heap"><a href="#关于heap" class="headerlink" title="关于heap"></a>关于heap</h2>Heap是用来储存动态分配变量的空间。对于heap而言，并没有像stack那样后进先出的规则，程序员可以选择随时分配或者回收内存。这就意味着程序员自己用命令回收内存，否则会产生内存泄漏(memory leak).<br>在C/C++中，程序员需要调用free/delete来释放动态分配的内存。在JAVA，Objective-C中，语言本身引入垃圾回收和计数规则帮助用户决定在什么时候自动释放内存。</li></ul><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><ul><li><p>在Stack上创建:  </p>  <pre><code class="hljs markdown">int array[<span class="hljs-string">M</span>][<span class="hljs-symbol">N</span>];</code></pre><p>  传递给子函数：</p>  <pre><code class="hljs markdown">void func(int arr[<span class="hljs-string">M</span>][<span class="hljs-symbol">N</span>])</code></pre><p>  M可以省略，但N必须存在，以便编译器确定移动内存的间距</p></li><li><p>在Heap上创建：  </p>  <pre><code class="hljs pgsql"><span class="hljs-type">int</span> **<span class="hljs-keyword">array</span> = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>*[M];//或者 (<span class="hljs-type">int</span>**)malloc(M* sizeof(<span class="hljs-type">int</span>*));</code></pre>  <pre><code class="hljs excel">for(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>; i&lt;M; i++)&#123;   array[i]= new <span class="hljs-built_in">int</span>[<span class="hljs-built_in">N</span>];//或者 (<span class="hljs-built_in">int</span>*)malloc(<span class="hljs-built_in">N</span> *sizeof(<span class="hljs-built_in">int</span>)); &#125;</code></pre><p>  传递给子函数：</p>  <pre><code class="hljs go">void <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **arr, <span class="hljs-keyword">int</span> M, <span class="hljs-keyword">int</span> N)</span></span>&#123;&#125;</code></pre><p>  使用完后需要释放内存:</p>  <pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;M; i++)<span class="hljs-keyword">delete</span>[] <span class="hljs-built_in">array</span>[i];<span class="hljs-comment">//先释放二维指针</span><span class="hljs-keyword">delete</span>[] <span class="hljs-built_in">array</span>;<span class="hljs-comment">//再释放一维指针</span></code></pre><h1 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h1></li><li><p>Vector 可以用云算法[]直接访问元素</p></li><li><p>size_type size()) const;//返回vector的元素个数</p></li><li><p>void push_back(const value_type val);//末端插入</p></li><li><p>pop_back()删除最后一个元素</p></li><li><p>erase()可以删除一个由iterator指出的元素，也可以删除一个指定的元素</p></li><li><p>remove()也可以删除vector容器中的元素(不建议使用)</p></li><li><p>不同的是，remove()一般情况下不会改变容器大小，popback()和erase()等成员函数会改变容器大小。</p></li><li><p>正确的使用iterator删除元素</p><pre><code class="hljs C++"><span class="hljs-keyword">for</span>(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = v.begin();it!=v.end();)&#123;  <span class="hljs-comment">//使用if else语句删除元素防止越界</span>  <span class="hljs-keyword">if</span>(condition)&#123;it = v.erase(it);&#125;<span class="hljs-keyword">else</span>&#123;++it;&#125;&#125;</code></pre><h1 id="Hash-Table"><a href="#Hash-Table" class="headerlink" title="Hash Table"></a>Hash Table</h1><p>Hash Table 几乎是最为重要的数据结构，主要用于基于“key”的查找，存储的基本元素是key-value的pair。逻辑上，数组可以作为Hash Table的一个特例：key是一个非负整数。<br>C++标准库中提供map容器，可以插入，删除，查找key-value pair,底层以平衡二叉搜索树的方式实现，根据key进行了排序。<br>在C++11中，标准库添加了unordered_map,更符合Hash table的传统定义，平均查找时间$O(1)$</p></li></ul><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><p>在C语言中，字符串指的是一个以’\0’结尾的char数组。关于字符串的函数通常需要传入一个字符型指针。<br>在C++中，String是一个类，并且可以通过调用类函数实现判断字符串长度，字串等操作。  </p><ul><li><p>C语言中String常用函数  </p><ul><li>char* strcpy(char* destination, const char* source) - 复制原字符串到目标字符串</li><li>char* strcat(char* destination, const char* source) - 将原字符串插入目标字符串</li><li>int strcmp(const char* str1, const char* str2) - 比较两个字符串，若相等则返回0，否则返回正数</li><li>char* strstr(char* str1, const char* str2) - 返回一个指针，指向str2在str1的所在位置，如果str2不在str1中则返回NULL</li><li>size_type strlen(const char* str) - 返回C字符串的长度</li><li>double atof(const char* str) - 将一个字符串转换成double类型</li><li>int atoi(const char* str) - 将一个字符串转换成int类型</li></ul></li><li><p>C++中String类常用函数  </p><ul><li>String类重载了+,&gt;,&lt;,=,==等运算符，比较是否相等，附加子串等都可以用运算符来实现。</li><li>size_t find(const string str, size_type pos = 0)const - 搜索子串在字符串中首次出现的位置，返回索引</li><li>string substr(size_t pos=0, size_t len=npos)const; - 从一个指定位置开始复制字符串</li><li>string erase(size_t pos=0, size_t len=npos) - 消除从某个位置开始的某个长度的子串</li><li>size_t length() - 返回字符串的长度<h1 id="模式识别"><a href="#模式识别" class="headerlink" title="模式识别"></a>模式识别</h1>当遇到某些题目需要统计一个元素集中元素出现的次数，应该直觉反应使用Hash Table,即使用std::unordered_map或std::map: key是元素，value是出现的次数。特别地， 有一些题目仅仅需要判断元素出现与否(相当于判断value是0还是1),可以用bitvector, 即bitset，利用一个bit来表示当前的下标是否有值。</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码素养</title>
    <link href="/2020/12/30/%E4%BB%A3%E7%A0%81%E7%B4%A0%E5%85%BB/"/>
    <url>/2020/12/30/%E4%BB%A3%E7%A0%81%E7%B4%A0%E5%85%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="基本代码素养"><a href="#基本代码素养" class="headerlink" title="基本代码素养"></a>基本代码素养</h1><h2 id="关于空格"><a href="#关于空格" class="headerlink" title="关于空格"></a>关于空格</h2><p>用空行将大块代码分成逻辑上的’段落’<br>不使用tab键</p><h2 id="关于括号"><a href="#关于括号" class="headerlink" title="关于括号"></a>关于括号</h2><p>C指针中的指针符号靠近类型名， 如写成int* p，而不写成int *p</p><h2 id="一个函数只专注做一件事情"><a href="#一个函数只专注做一件事情" class="headerlink" title="一个函数只专注做一件事情"></a>一个函数只专注做一件事情</h2><p>一个函数很复杂时，尽量将这个函数拆解成几个简单的函数</p><h2 id="关于命名"><a href="#关于命名" class="headerlink" title="关于命名"></a>关于命名</h2><ul><li>类名用大写字母开头</li><li>较长的函数名由多个单词组成，每个单词首字母大写</li><li>函数名很短的话首字母小写</li><li>变量名可以由多个单词构成，首个单词的首字母小写，其他单词的首字母大写</li><li>变量名尽量用全名</li><li>常量用大写字母单词，中间用下划线分开</li></ul><h1 id="实战算法策略"><a href="#实战算法策略" class="headerlink" title="实战算法策略"></a>实战算法策略</h1><ul><li>总结归类相似的题目</li><li>找出适合同一类题目的模板程序</li><li>对基础题熟练掌握</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置coc-clangd</title>
    <link href="/2020/12/23/%E9%85%8D%E7%BD%AEcoc-clangd/"/>
    <url>/2020/12/23/%E9%85%8D%E7%BD%AEcoc-clangd/</url>
    
    <content type="html"><![CDATA[<h1 id="解决找不到clangd"><a href="#解决找不到clangd" class="headerlink" title="解决找不到clangd"></a>解决找不到clangd</h1><p>在配置coc.nvim下的插件coc.clangd时，安装好插件在打开cpp文件时报错提示</p><pre><code class="hljs css"><span class="hljs-selector-attr">[coc.nvim]</span> <span class="hljs-selector-tag">clangd</span> <span class="hljs-selector-tag">was</span> <span class="hljs-selector-tag">not</span> <span class="hljs-selector-tag">found</span> <span class="hljs-selector-tag">on</span> <span class="hljs-selector-tag">your</span> <span class="hljs-selector-tag">PATH</span>. <span class="hljs-selector-pseudo">:CocCommand</span> <span class="hljs-selector-tag">clangd</span><span class="hljs-selector-class">.install</span> <span class="hljs-selector-tag">will</span> <span class="hljs-selector-tag">install</span> 10<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span>.</code></pre><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ul><li>nvim下输入:CocCommand clangd.install nvim会自动在后台下载clangd<br>  上述方法在国内下载速度较慢，笔者等了半天都没安装好，于是选择手动安装</li><li>到clangd的仓库下载clangd11.0.0</li></ul><h1 id="下载clangd11-0-0"><a href="#下载clangd11-0-0" class="headerlink" title="下载clangd11.0.0"></a>下载clangd11.0.0</h1><p><a href="https://github.com/clangd/clangd/releases/tag/11.0.0">clangd</a><br>下载后运行仍然提示</p><pre><code class="hljs css"><span class="hljs-selector-attr">[coc.nvim]</span> <span class="hljs-selector-tag">clangd</span> <span class="hljs-selector-tag">was</span> <span class="hljs-selector-tag">not</span> <span class="hljs-selector-tag">found</span> <span class="hljs-selector-tag">on</span> <span class="hljs-selector-tag">your</span> <span class="hljs-selector-tag">PATH</span>. <span class="hljs-selector-pseudo">:CocCommand</span> <span class="hljs-selector-tag">clangd</span><span class="hljs-selector-class">.install</span> <span class="hljs-selector-tag">will</span> <span class="hljs-selector-tag">install</span> 10<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span>.</code></pre><p>原因是coc.clangd会在环境变量文件下找clangd，因此需要ln软链接到~/.local/bin/clangd下</p><pre><code class="hljs arcade">cd ~<span class="hljs-regexp">/.local/</span>bin/clangdtouch clangdln -s [clangd源程序地址] ~<span class="hljs-regexp">/.local/</span>bin/clangd</code></pre><p>重新打开neovim可以发现coc.nvim正常运行！</p><h1 id="ln语法"><a href="#ln语法" class="headerlink" title="ln语法"></a>ln语法</h1><p>ln指令的正确使用语法:</p><pre><code class="hljs angelscript">ln -s <span class="hljs-number">1.</span>链接目标 <span class="hljs-number">2.</span>软链接</code></pre><p>1.被链接的目标真实物理路径<br>2.对链接目标创建的符号链接</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>neovim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>终端下配置代理</title>
    <link href="/2020/12/23/%E7%BB%88%E7%AB%AF%E4%B8%8B%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    <url>/2020/12/23/%E7%BB%88%E7%AB%AF%E4%B8%8B%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="终端下设置代理"><a href="#终端下设置代理" class="headerlink" title="终端下设置代理"></a>终端下设置代理</h1><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">http_proxy</span>=http://127.0.0.1:8889</code></pre><h1 id="git设置代理"><a href="#git设置代理" class="headerlink" title="git设置代理"></a>git设置代理</h1><pre><code class="hljs tcl">git config --<span class="hljs-keyword">global</span> <span class="hljs-keyword">http</span>.proxy <span class="hljs-keyword">http</span>://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8889</span>git config --<span class="hljs-keyword">global</span> --<span class="hljs-keyword">unset</span> <span class="hljs-keyword">http</span>.proxy</code></pre><h1 id="npm设置代理"><a href="#npm设置代理" class="headerlink" title="npm设置代理"></a>npm设置代理</h1><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">proxy</span>=http://127.0.0.1:8889</code></pre><h1 id="npm取消代理"><a href="#npm取消代理" class="headerlink" title="npm取消代理"></a>npm取消代理</h1><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span>delete proxy</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>终端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ bitset</title>
    <link href="/2020/12/16/bitset%E7%94%A8%E6%B3%95/"/>
    <url>/2020/12/16/bitset%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>C++ 的 bitset 在 bitset 头文件中，它是一种类似数组的结构，它的每一个元素只能是0或者1,每个元素仅占用1bit空间</p><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></code></pre><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><pre><code class="hljs C++"><span class="hljs-built_in">bitset</span>&lt;4&gt; bitset1;<span class="hljs-comment">//无参数构造，长度为4,默认每一位为0</span><span class="hljs-function"><span class="hljs-built_in">bitset</span>&lt;8&gt; <span class="hljs-title">bitset2</span><span class="hljs-params">(<span class="hljs-number">12</span>)</span></span>;<span class="hljs-comment">//长度为8，二进制保存，前面用0补充</span></code></pre><pre><code class="hljs C++"><span class="hljs-built_in">string</span> s = <span class="hljs-string">&quot;100101&quot;</span><span class="hljs-built_in">bitset</span>&lt;<span class="hljs-number">10</span>&gt; bitset3(s);<span class="hljs-comment">//长度为10,前面用0补充</span></code></pre><pre><code class="hljs C++"><span class="hljs-keyword">char</span> s2[]=<span class="hljs-string">&quot;10101&quot;</span><span class="hljs-built_in">bitset</span>&lt;<span class="hljs-number">13</span>&gt; bitset4(s2);<span class="hljs-comment">//长度为13，前面用0补充</span></code></pre><pre><code class="hljs C++"><span class="hljs-built_in">cout</span>&lt;&lt;bitset1&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//0000</span><span class="hljs-built_in">cout</span>&lt;&lt;bitset2&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//00001100</span><span class="hljs-built_in">cout</span>&lt;&lt;bitset3&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//0000100101</span><span class="hljs-built_in">cout</span>&lt;&lt;bitset4&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//0000000010101</span></code></pre><p>注意：<br>使用字符串构造时，字符串只能包含’0’或者’1’，否则会抛出异常。<br>构造时，需要在&lt;&gt;中声明bitset的大小(即size)。<br>在进行有参构造时，若参数的二进制表示比bitset的size小，则在前面用0补充(如上面的例子);若比bitsize大，参数为整数时取后面部分，参数为字符串时取前面部分(如下例子):</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-built_in">bitset</span>&lt;2&gt; <span class="hljs-title">bitset1</span><span class="hljs-params">(<span class="hljs-number">12</span>)</span></span>;<span class="hljs-comment">//12的二进制为1100（长度为4），但bitset1的size=2,只能取后面部分，即00</span><span class="hljs-built_in">string</span> s = <span class="hljs-string">&quot;100101&quot;</span>;<span class="hljs-function"><span class="hljs-built_in">bitset</span>&lt;4&gt; <span class="hljs-title">bitset2</span><span class="hljs-params">(s)</span></span>;<span class="hljs-comment">//s的size=6,只取前面的部分，即1001</span><span class="hljs-keyword">char</span> s2[]=<span class="hljs-string">&quot;11101&quot;</span><span class="hljs-built_in">bitset</span>&lt;<span class="hljs-number">4</span>&gt; bitset3(s2);<span class="hljs-comment">//与bitset2同理，只取前面部分，即1110</span><span class="hljs-built_in">cout</span>&lt;&lt;bitset1&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//00</span><span class="hljs-built_in">cout</span>&lt;&lt;bitset2&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//1001</span><span class="hljs-built_in">cout</span>&lt;&lt;bitset3&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//1110</span></code></pre><h1 id="可用的操作符"><a href="#可用的操作符" class="headerlink" title="可用的操作符"></a>可用的操作符</h1><p>bitset 对于二进制有位操作符，具体如下</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-built_in">bitset</span>&lt;4&gt; <span class="hljs-title">foo</span> <span class="hljs-params">(<span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;1001&quot;</span>))</span></span>;<span class="hljs-function"><span class="hljs-built_in">bitset</span>&lt;4&gt; <span class="hljs-title">bar</span> <span class="hljs-params">(<span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;0011&quot;</span>))</span></span>;<span class="hljs-built_in">cout</span> &lt;&lt; (foo^=bar) &lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//1010（foo对bar按位异或后赋值给foo）</span><span class="hljs-built_in">cout</span> &lt;&lt; (foo&amp;=bar) &lt;&lt; <span class="hljs-built_in">endl</span>;       <span class="hljs-comment">// 0010 (按位与后赋值给foo)</span><span class="hljs-built_in">cout</span> &lt;&lt; (foo|=bar) &lt;&lt; <span class="hljs-built_in">endl</span>;       <span class="hljs-comment">// 0011 (按位或后赋值给foo)</span><span class="hljs-built_in">cout</span> &lt;&lt; (foo&lt;&lt;=<span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;        <span class="hljs-comment">// 1100 (左移２位，低位补０，有自身赋值)</span><span class="hljs-built_in">cout</span> &lt;&lt; (foo&gt;&gt;=<span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;        <span class="hljs-comment">// 0110 (右移１位，高位补０，有自身赋值)</span><span class="hljs-built_in">cout</span> &lt;&lt; (~bar) &lt;&lt; <span class="hljs-built_in">endl</span>;           <span class="hljs-comment">// 1100 (按位取反)</span><span class="hljs-built_in">cout</span> &lt;&lt; (bar&lt;&lt;<span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;         <span class="hljs-comment">// 0110 (左移，不赋值)</span><span class="hljs-built_in">cout</span> &lt;&lt; (bar&gt;&gt;<span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;         <span class="hljs-comment">// 0001 (右移，不赋值)</span><span class="hljs-built_in">cout</span> &lt;&lt; (foo==bar) &lt;&lt; <span class="hljs-built_in">endl</span>;       <span class="hljs-comment">// false (0110==0011为false)</span><span class="hljs-built_in">cout</span> &lt;&lt; (foo!=bar) &lt;&lt; <span class="hljs-built_in">endl</span>;       <span class="hljs-comment">// true  (0110!=0011为true)</span><span class="hljs-built_in">cout</span> &lt;&lt; (foo&amp;bar) &lt;&lt; <span class="hljs-built_in">endl</span>;        <span class="hljs-comment">// 0010 (按位与，不赋值)</span><span class="hljs-built_in">cout</span> &lt;&lt; (foo|bar) &lt;&lt; <span class="hljs-built_in">endl</span>;        <span class="hljs-comment">// 0111 (按位或，不赋值)</span><span class="hljs-built_in">cout</span> &lt;&lt; (foo^bar) &lt;&lt; <span class="hljs-built_in">endl</span>;        <span class="hljs-comment">// 0101 (按位异或，不赋值)</span></code></pre><h1 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h1><p>bitset类似数组，使用[]符号进行访问，最低位为0：</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-built_in">bitset</span>&lt;4&gt; <span class="hljs-title">foo</span> <span class="hljs-params">(<span class="hljs-string">&quot;1011&quot;</span>)</span></span>;<span class="hljs-built_in">cout</span>&lt;&lt; foo[<span class="hljs-number">0</span>] &lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//1</span><span class="hljs-built_in">cout</span>&lt;&lt; foo[<span class="hljs-number">1</span>] &lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//0</span></code></pre><p>同样可以使用这种方式进行赋值</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>求bitset中1的位数</td></tr><tr><td>size</td><td>求bitset大小</td></tr><tr><td>test</td><td>检查元素是0还是1</td></tr><tr><td>any</td><td>检查bitset中是否有1</td></tr><tr><td>none</td><td>检查bitset中是否没有1</td></tr><tr><td>all</td><td>检查bitset中是否全部为1</td></tr><tr><td>flip</td><td>将bitset中的每一位都取反</td></tr><tr><td>set</td><td>将bitset中每一位都置为1</td></tr><tr><td>reset</td><td>将bitset每一位置为0</td></tr></tbody></table><p>flip,set,reset具体如下</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-built_in">bitset</span>&lt;8&gt; <span class="hljs-title">foo</span> <span class="hljs-params">(<span class="hljs-string">&quot;10011011&quot;</span>)</span></span>;<span class="hljs-built_in">cout</span> &lt;&lt; foo.flip(<span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;　　<span class="hljs-comment">//10011111　　（flip函数传参数时，用于将参数位取反，本行代码将foo下标２处&quot;反转&quot;，即０变１，１变０</span><span class="hljs-built_in">cout</span> &lt;&lt; foo.flip() &lt;&lt; <span class="hljs-built_in">endl</span>;　　 <span class="hljs-comment">//01100000　　（flip函数不指定参数时，将bitset每一位全部取反</span><span class="hljs-built_in">cout</span> &lt;&lt; foo.<span class="hljs-built_in">set</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;　　　　<span class="hljs-comment">//11111111　　（set函数不指定参数时，将bitset的每一位全部置为１</span><span class="hljs-built_in">cout</span> &lt;&lt; foo.<span class="hljs-built_in">set</span>(<span class="hljs-number">3</span>,<span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;　　<span class="hljs-comment">//11110111　　（set函数指定两位参数时，将第一参数位的元素置为第二参数的值，本行对foo的操作相当于foo[3]=0</span><span class="hljs-built_in">cout</span> &lt;&lt; foo.<span class="hljs-built_in">set</span>(<span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;　　  <span class="hljs-comment">//11111111　　（set函数只有一个参数时，将参数下标处置为１</span><span class="hljs-built_in">cout</span> &lt;&lt; foo.reset(<span class="hljs-number">4</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;　　<span class="hljs-comment">//11101111　　（reset函数传一个参数时将参数下标处置为０</span><span class="hljs-built_in">cout</span> &lt;&lt; foo.reset() &lt;&lt; <span class="hljs-built_in">endl</span>;　　 <span class="hljs-comment">//00000000　　（reset函数不传参数时将bitset的每一位全部置为０</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>latex算法编辑</title>
    <link href="/2020/10/19/latex%E7%AE%97%E6%B3%95%E7%BC%96%E8%BE%91/"/>
    <url>/2020/10/19/latex%E7%AE%97%E6%B3%95%E7%BC%96%E8%BE%91/</url>
    
    <content type="html"><![CDATA[<p>因为要写论文，不得不开始latex。<br>以下代码使用algorithm2e包，在overleaf上编写。</p><pre><code class="hljs powershell">\def\SetClass&#123;article&#125;\documentclass&#123;\SetClass&#125;\usepackage[<span class="hljs-type">lined</span>,<span class="hljs-type">boxed</span>,<span class="hljs-type">commentsnumbered</span>]&#123;algorithm2e&#125;\begin&#123;document&#125;\begin&#123;algorithm&#125;[<span class="hljs-type">H</span>]\SetAlgoLined\KwData&#123;<span class="hljs-variable">$G</span>(V,E)<span class="hljs-variable">$</span>,<span class="hljs-variable">$k</span><span class="hljs-variable">$</span>&#125;\KwResult&#123;K<span class="hljs-literal">-degree</span> anonymity sequences <span class="hljs-variable">$d</span>^*<span class="hljs-variable">$</span> &#125;get degree sequence of G\;<span class="hljs-built_in">sort</span> the degree sequence\;put the first <span class="hljs-variable">$k</span><span class="hljs-variable">$</span> nodes into a <span class="hljs-built_in">group</span> <span class="hljs-variable">$g</span><span class="hljs-variable">$</span>\;count <span class="hljs-variable">$d_</span>&#123;average&#125;(g)<span class="hljs-variable">$</span>\;<span class="hljs-built_in">set</span> <span class="hljs-variable">$d</span>(n_&#123;g&#125;)=d_&#123;average&#125;(g)<span class="hljs-variable">$</span>\;\While&#123;<span class="hljs-keyword">until</span> every node get the <span class="hljs-built_in">group</span>&#125;&#123;        count <span class="hljs-variable">$C_</span>&#123;merge&#125; = (d(a)<span class="hljs-literal">-d_</span>&#123;k+<span class="hljs-number">1</span>&#125;)+I(d[<span class="hljs-type">k</span>+<span class="hljs-number">2</span>,<span class="hljs-number">2</span><span class="hljs-type">k</span>+<span class="hljs-number">1</span>])<span class="hljs-variable">$</span>\;    count <span class="hljs-variable">$C_</span>&#123;new&#125; = I(d[<span class="hljs-type">k</span>+<span class="hljs-number">1</span>,<span class="hljs-number">2</span><span class="hljs-type">k</span>])<span class="hljs-variable">$</span>\;    \eIf &#123;<span class="hljs-variable">$C_</span>&#123;merge&#125;&gt;C_&#123;new&#125;<span class="hljs-variable">$</span>&#125;    &#123;put nodes from <span class="hljs-variable">$n_</span>&#123;k+<span class="hljs-number">1</span>&#125;<span class="hljs-variable">$</span> to <span class="hljs-variable">$n_</span>&#123;<span class="hljs-number">2</span>k&#125;<span class="hljs-variable">$</span> into new <span class="hljs-built_in">group</span> <span class="hljs-variable">$g</span>`$\;&#125;    &#123;pass\;&#125;    \eIf &#123;<span class="hljs-variable">$C_</span>&#123;merge&#125;&lt;C_&#123;new&#125;<span class="hljs-variable">$</span>&#125;    &#123;put <span class="hljs-variable">$n_</span>&#123;k+<span class="hljs-number">1</span>&#125;<span class="hljs-variable">$</span> into <span class="hljs-built_in">group</span> <span class="hljs-variable">$g</span><span class="hljs-variable">$</span>&#125;    &#123;pass\;&#125;    &#125;  \caption&#123;greedy partition\label&#123;IR&#125;&#125;\end&#123;algorithm&#125;\begin&#123;algorithm&#125;[<span class="hljs-type">H</span>]  \SetAlgoLined  \KwData&#123;original graph <span class="hljs-variable">$G</span>=(V,E)<span class="hljs-variable">$</span>, K<span class="hljs-literal">-degree</span> anonymity sequences <span class="hljs-variable">$d</span>^*<span class="hljs-variable">$</span> , original degree anonymity <span class="hljs-variable">$d</span><span class="hljs-variable">$</span>&#125;  \KwResult&#123;K<span class="hljs-literal">-degree</span> anonymity graph <span class="hljs-variable">$G</span>^*=(V^*,E^*)<span class="hljs-variable">$</span> &#125;\While&#123;True&#125;&#123;<span class="hljs-built_in">sort</span> (<span class="hljs-variable">$d</span>^*<span class="hljs-variable">$</span>)\;pick node <span class="hljs-variable">$v_</span>&#123;i&#125;= d^*_&#123;max&#125;<span class="hljs-variable">$</span>\;pick randomly node <span class="hljs-variable">$v_</span>&#123;j&#125;<span class="hljs-variable">$</span>, <span class="hljs-variable">$v_</span>&#123;j&#125;<span class="hljs-variable">$</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$d</span>^*<span class="hljs-variable">$</span> \;\eIf&#123;<span class="hljs-variable">$d_</span>&#123;v_&#123;i&#125;&#125;&lt;d^*_&#123;v_&#123;i&#125;&#125;<span class="hljs-variable">$</span> and <span class="hljs-variable">$d_</span>&#123;v_&#123;j&#125;&#125;&lt;d^*_&#123;v_&#123;j&#125;&#125;<span class="hljs-variable">$</span>&#125;&#123;\eIf&#123;<span class="hljs-variable">$</span>&#123;\exists&#125;<span class="hljs-variable">$</span><span class="hljs-variable">$e_</span>&#123;v_&#123;i&#125;,v_&#123;j&#125;&#125;<span class="hljs-variable">$</span>&#125;&#123;pick randomly two nodes <span class="hljs-variable">$v_</span>&#123;p&#125;,v_&#123;q&#125;<span class="hljs-variable">$</span>\(<span class="hljs-variable">$</span>&#123;\exists&#125;e_&#123;v_&#123;p&#125;,v_&#123;q&#125;&#125;<span class="hljs-variable">$</span> and (<span class="hljs-variable">$v_</span>&#123;p&#125;,v_&#123;q&#125;&#123;\notin&#125;neighbor(v_&#123;i&#125;)<span class="hljs-variable">$</span>),(<span class="hljs-variable">$v_</span>&#123;p&#125;,v_&#123;q&#125;&#123;\notin&#125;neighbor(v_&#123;j&#125;)))<span class="hljs-variable">$</span>&#125;&#123;add <span class="hljs-variable">$e_</span>&#123;v_&#123;i&#125;,v_&#123;j&#125;&#125;<span class="hljs-variable">$</span>\;<span class="hljs-keyword">continue</span>;&#125;&#125;&#123;pass&#125;\\eIf&#123;<span class="hljs-variable">$d_</span>&#123;v_&#123;i&#125;&#125;&gt;d^*_&#123;v_&#123;i&#125;&#125;<span class="hljs-variable">$</span> and <span class="hljs-variable">$d_</span>&#123;v_&#123;j&#125;&#125;&gt;d^*_&#123;v_&#123;j&#125;&#125;<span class="hljs-variable">$</span>&#125;&#123;\eIf&#123;<span class="hljs-variable">$</span>&#123;\exists&#125;<span class="hljs-variable">$</span><span class="hljs-variable">$e_</span>&#123;v_&#123;i&#125;,v_&#123;j&#125;&#125;<span class="hljs-variable">$</span>&#125;&#123;delete <span class="hljs-variable">$e_</span>&#123;v_&#123;i&#125;,v_&#123;j&#125;&#125;<span class="hljs-variable">$</span>;&#125;&#123;pick randomly two nodes <span class="hljs-variable">$v_</span>&#123;p&#125;,v_&#123;q&#125;<span class="hljs-variable">$</span>\(<span class="hljs-variable">$</span>&#123;\exists&#125;e_&#123;v_&#123;p&#125;,v_&#123;q&#125;&#125;<span class="hljs-variable">$</span> and (<span class="hljs-variable">$v_</span>&#123;p&#125;,v_&#123;q&#125;&#123;\in&#125;neighbor(v_&#123;i&#125;)<span class="hljs-variable">$</span>),(<span class="hljs-variable">$v_</span>&#123;p&#125;,v_&#123;q&#125;&#123;\in&#125;neighbor(v_&#123;j&#125;)))<span class="hljs-variable">$</span>\;delete <span class="hljs-variable">$e_</span>&#123;v_&#123;i&#125;,v_&#123;p&#125;&#125;<span class="hljs-variable">$</span>\;delete <span class="hljs-variable">$e_</span>&#123;v_&#123;j&#125;,v_&#123;q&#125;&#125;<span class="hljs-variable">$</span>\;add <span class="hljs-variable">$e_</span>&#123;v_&#123;p&#125;,v_&#123;q&#125;&#125;<span class="hljs-variable">$</span>\;<span class="hljs-keyword">continue</span>;&#125;&#125;&#123;pass&#125;\eIf&#123;<span class="hljs-variable">$d_</span>&#123;v_&#123;i&#125;&#125;&gt;d^*_&#123;v_&#123;i&#125;&#125;<span class="hljs-variable">$</span> and <span class="hljs-variable">$d_</span>&#123;v_&#123;j&#125;&#125;&lt;d^*_&#123;v_&#123;j&#125;&#125;<span class="hljs-variable">$</span>&#125;&#123;pick randomly one node <span class="hljs-variable">$v_</span>&#123;p&#125;<span class="hljs-variable">$</span>(<span class="hljs-variable">$</span>&#123;\exists&#125;<span class="hljs-variable">$</span><span class="hljs-variable">$e_</span>&#123;v_&#123;i&#125;,v_&#123;p&#125;&#125;<span class="hljs-variable">$</span> and <span class="hljs-variable">$v_</span>&#123;p&#125; \notin neighbor(v_&#123;j&#125;)<span class="hljs-variable">$</span>)\;delete <span class="hljs-variable">$e_</span>&#123;v_&#123;i&#125;,v_&#123;p&#125;&#125;<span class="hljs-variable">$</span>\;add <span class="hljs-variable">$e_</span>&#123;v_&#123;j&#125;,v_&#123;p&#125;&#125;<span class="hljs-variable">$</span>\;<span class="hljs-keyword">continue</span>;&#125;&#123;pass&#125;&#125;\caption&#123;Graph modification algorithm&#125;\end&#123;algorithm&#125;\end&#123;document&#125;</code></pre><p><img src="https://i.loli.net/2020/10/19/ljgm12ziyMhcfqO.png" alt="贪婪算法"><br><img src="https://i.loli.net/2020/10/19/Ww6a4OKCnTDdoBQ.png" alt="图修改算法"></p>]]></content>
    
    
    
    <tags>
      
      <tag>latex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的vim配置</title>
    <link href="/2020/10/18/%E6%88%91%E7%9A%84vim%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/10/18/%E6%88%91%E7%9A%84vim%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs vim"><span class="hljs-keyword">set</span> t_co=<span class="hljs-number">256</span><span class="hljs-keyword">set</span> encoding=utf-<span class="hljs-number">8</span><span class="hljs-keyword">set</span> directory=.,$TEMP<span class="hljs-keyword">let</span> &amp;t_ut=<span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">&quot;修改缩进距离</span><span class="hljs-keyword">set</span> tabstop=<span class="hljs-number">2</span><span class="hljs-comment">&quot;首个退格键返回上一行</span><span class="hljs-keyword">set</span> backspace=<span class="hljs-built_in">indent</span>,eol,start<span class="hljs-keyword">let</span> &amp;t_SI=<span class="hljs-string">&quot;\&lt;Esc&gt;]50;CursorShape=1\x7&quot;</span><span class="hljs-keyword">let</span> &amp;t_SR=<span class="hljs-string">&quot;\&lt;Esc&gt;]50;CursorShape=2\x7&quot;</span><span class="hljs-keyword">let</span> &amp;t_EI=<span class="hljs-string">&quot;\&lt;Esc&gt;]50;CursorShape=0\x7&quot;</span><span class="hljs-comment">&quot;vim下次打开返回上次编辑的位置</span><span class="hljs-keyword">au</span> BufReadPost * <span class="hljs-keyword">if</span> <span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;&#x27;\&quot;&quot;</span>) &gt; <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;&#x27;\&quot;&quot;</span>) &lt;= <span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;$&quot;</span>) | <span class="hljs-keyword">exe</span> <span class="hljs-string">&quot;normal! G&#x27;\&quot;&quot;</span> | <span class="hljs-keyword">endif</span><span class="hljs-comment">&quot;leader键映射为空格</span><span class="hljs-keyword">let</span> mapleader=<span class="hljs-string">&quot; &quot;</span><span class="hljs-keyword">syntax</span> <span class="hljs-keyword">on</span><span class="hljs-keyword">set</span> <span class="hljs-keyword">number</span><span class="hljs-keyword">set</span> relativenumber<span class="hljs-keyword">set</span> cursorline<span class="hljs-keyword">set</span> wrap<span class="hljs-keyword">set</span> showcmd<span class="hljs-keyword">set</span> wildmenu<span class="hljs-keyword">set</span> ignorecase<span class="hljs-keyword">set</span> hlsearch<span class="hljs-keyword">set</span> incsearch<span class="hljs-keyword">set</span> smartcaseexec <span class="hljs-string">&quot;nohlsearch&quot;</span><span class="hljs-keyword">noremap</span> = nzz<span class="hljs-keyword">noremap</span> - Nzz<span class="hljs-keyword">noremap</span> <span class="hljs-keyword">j</span> h<span class="hljs-keyword">noremap</span> <span class="hljs-keyword">k</span> <span class="hljs-keyword">j</span><span class="hljs-keyword">noremap</span> i <span class="hljs-keyword">k</span><span class="hljs-keyword">noremap</span> n i<span class="hljs-keyword">noremap</span> <span class="hljs-keyword">N</span> I<span class="hljs-keyword">noremap</span> I <span class="hljs-number">5</span><span class="hljs-keyword">k</span><span class="hljs-keyword">noremap</span> K <span class="hljs-number">5</span><span class="hljs-keyword">j</span><span class="hljs-keyword">noremap</span> J <span class="hljs-number">5</span>h<span class="hljs-keyword">noremap</span> L <span class="hljs-number">5</span><span class="hljs-keyword">l</span><span class="hljs-keyword">noremap</span> <span class="hljs-symbol">&lt;LEADER&gt;</span><span class="hljs-symbol">&lt;CR&gt;</span> :<span class="hljs-keyword">nohlsearch</span><span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">map</span> S :w!<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">map</span> s <span class="hljs-symbol">&lt;nop&gt;</span><span class="hljs-keyword">map</span> Q :q<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-comment">&quot;设置向右分屏</span><span class="hljs-keyword">map</span> <span class="hljs-keyword">sl</span> :<span class="hljs-keyword">set</span> splitright<span class="hljs-symbol">&lt;CR&gt;</span>:<span class="hljs-keyword">vsplit</span><span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-comment">&quot;设置向左分屏</span><span class="hljs-keyword">map</span> sj :<span class="hljs-keyword">set</span> nosplitright<span class="hljs-symbol">&lt;CR&gt;</span>:<span class="hljs-keyword">vsplit</span><span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-comment">&quot;设置向上分屏</span><span class="hljs-keyword">map</span> si :<span class="hljs-keyword">set</span> nosplitbelow<span class="hljs-symbol">&lt;CR&gt;</span>:<span class="hljs-keyword">split</span><span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-comment">&quot;设置向下分屏</span><span class="hljs-keyword">map</span> sk :<span class="hljs-keyword">set</span> splitbelow<span class="hljs-symbol">&lt;CR&gt;</span>:<span class="hljs-keyword">split</span><span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-comment">&quot;刷新vimrc</span><span class="hljs-keyword">map</span> R :<span class="hljs-keyword">source</span> $MYVIMRC<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-comment">&quot;分屏方向</span><span class="hljs-keyword">map</span> <span class="hljs-symbol">&lt;LEADER&gt;</span><span class="hljs-keyword">l</span> <span class="hljs-symbol">&lt;C-w&gt;</span><span class="hljs-keyword">l</span><span class="hljs-keyword">map</span> <span class="hljs-symbol">&lt;LEADER&gt;</span>i <span class="hljs-symbol">&lt;C-w&gt;</span><span class="hljs-keyword">k</span><span class="hljs-keyword">map</span> <span class="hljs-symbol">&lt;LEADER&gt;</span><span class="hljs-keyword">j</span> <span class="hljs-symbol">&lt;C-w&gt;</span>h<span class="hljs-keyword">map</span> <span class="hljs-symbol">&lt;LEADER&gt;</span><span class="hljs-keyword">k</span> <span class="hljs-symbol">&lt;C-w&gt;</span><span class="hljs-keyword">j</span><span class="hljs-comment">&quot;打开标签页</span><span class="hljs-keyword">map</span> <span class="hljs-keyword">tu</span> :<span class="hljs-keyword">tabe</span><span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">map</span> <span class="hljs-keyword">tj</span> :-<span class="hljs-keyword">tabnext</span><span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">map</span> <span class="hljs-keyword">tl</span> :+<span class="hljs-keyword">tabnext</span><span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-comment">&quot;切换分屏</span><span class="hljs-keyword">map</span> <span class="hljs-keyword">sv</span> <span class="hljs-symbol">&lt;C-w&gt;</span>t<span class="hljs-symbol">&lt;C-w&gt;</span>H<span class="hljs-keyword">map</span> <span class="hljs-keyword">sh</span> <span class="hljs-symbol">&lt;C-w&gt;</span>t<span class="hljs-symbol">&lt;C-w&gt;</span>K<span class="hljs-comment">&quot;set paste</span><span class="hljs-keyword">map</span> <span class="hljs-symbol">&lt;LEADER&gt;</span><span class="hljs-keyword">sp</span> :<span class="hljs-keyword">set</span> paste<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-comment">&quot;markdownpreview</span><span class="hljs-keyword">map</span> md :MarkdownPreview<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-comment">&quot;方向键改为修改分屏大小</span><span class="hljs-keyword">map</span> <span class="hljs-symbol">&lt;up&gt;</span> :<span class="hljs-keyword">res</span> +<span class="hljs-number">5</span><span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">map</span> <span class="hljs-symbol">&lt;down&gt;</span> :<span class="hljs-keyword">res</span> -<span class="hljs-number">5</span><span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">map</span> <span class="hljs-symbol">&lt;left&gt;</span> :<span class="hljs-keyword">vertical</span> <span class="hljs-keyword">resize</span>-<span class="hljs-number">5</span><span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">map</span> <span class="hljs-symbol">&lt;right&gt;</span> :<span class="hljs-keyword">vertical</span> <span class="hljs-keyword">resize</span>+<span class="hljs-number">5</span><span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-comment">&quot;插件</span><span class="hljs-keyword">call</span> plug#begin(<span class="hljs-string">&#x27;~/.vim/plugged&#x27;</span>)<span class="hljs-comment">&quot;状态栏</span>Plug <span class="hljs-string">&#x27;vim-airline/vim-airline&#x27;</span><span class="hljs-comment">&quot;主题</span>Plug <span class="hljs-string">&#x27;connorholyday/vim-snazzy&#x27;</span>Plug <span class="hljs-string">&#x27;arcticicestudio/nord-vim&#x27;</span><span class="hljs-comment">&quot;选中的行高亮</span>Plug <span class="hljs-string">&#x27;itchyny/lightline.vim&#x27;</span><span class="hljs-comment">&quot;目录树导航</span>Plug <span class="hljs-string">&#x27;scrooloose/nerdtree&#x27;</span>,&#123; <span class="hljs-string">&#x27;on&#x27;</span>:<span class="hljs-string">&#x27;NERDTreeToggle&#x27;</span>&#125;Plug <span class="hljs-string">&#x27;Xuyuanp/nerdtree-git-plugin&#x27;</span><span class="hljs-comment">&quot;python自动补全</span><span class="hljs-comment">&quot;Plug &#x27;davidhalter/jedi-vim&#x27;</span><span class="hljs-comment">&quot;Plug &#x27;klen/python-mode&#x27;</span><span class="hljs-comment">&quot;可视化缩进</span><span class="hljs-comment">&quot;Plug &#x27;nathanaelkane/vim-indent-guides&#x27;</span><span class="hljs-comment">&quot;括号匹配高亮</span><span class="hljs-comment">&quot;Plug &#x27;kien/rainbow_parentheses.vim&#x27;</span><span class="hljs-comment">&quot; 标签导航</span>Plug <span class="hljs-string">&#x27;majutsushi/tagbar&#x27;</span>,&#123; <span class="hljs-string">&#x27;on&#x27;</span>: <span class="hljs-string">&#x27;TagbarOpenAutoClose&#x27;</span>&#125;<span class="hljs-comment">&quot; 错误检查</span>Plug <span class="hljs-string">&#x27;W0rp/ale&#x27;</span><span class="hljs-comment">&quot;自动补全</span>Plug <span class="hljs-string">&#x27;Valloric/YouCompleteMe&#x27;</span><span class="hljs-comment">&quot; Undo Tree</span><span class="hljs-comment">&quot;Plug &#x27;mbbill/undotree/&#x27;</span><span class="hljs-comment">&quot; 其他的视觉增强</span>Plug <span class="hljs-string">&#x27;nathanaelkane/vim-indent-guides&#x27;</span><span class="hljs-comment">&quot; Git</span>Plug <span class="hljs-string">&#x27;rhysd/conflict-marker.vim&#x27;</span>Plug <span class="hljs-string">&#x27;tpope/vim-fugitive&#x27;</span>Plug <span class="hljs-string">&#x27;mhinz/vim-signify&#x27;</span>Plug <span class="hljs-string">&#x27;gisphm/vim-gitignore&#x27;</span>, &#123; <span class="hljs-string">&#x27;for&#x27;</span>: [<span class="hljs-string">&#x27;gitignore&#x27;</span>, <span class="hljs-string">&#x27;vim-plug&#x27;</span>] &#125;<span class="hljs-comment">&quot; HTML, CSS, JavaScript, PHP, JSON, etc.</span>Plug <span class="hljs-string">&#x27;elzr/vim-json&#x27;</span>Plug <span class="hljs-string">&#x27;hail2u/vim-css3-syntax&#x27;</span>Plug <span class="hljs-string">&#x27;spf13/PIV&#x27;</span>, &#123; <span class="hljs-string">&#x27;for&#x27;</span> :[<span class="hljs-string">&#x27;php&#x27;</span>, <span class="hljs-string">&#x27;vim-plug&#x27;</span>] &#125;Plug <span class="hljs-string">&#x27;gko/vim-coloresque&#x27;</span>, &#123; <span class="hljs-string">&#x27;for&#x27;</span>: [<span class="hljs-string">&#x27;vim-plug&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>, <span class="hljs-string">&#x27;html&#x27;</span>,<span class="hljs-string">&#x27;javascript&#x27;</span>, <span class="hljs-string">&#x27;css&#x27;</span>, <span class="hljs-string">&#x27;less&#x27;</span>] &#125;Plug <span class="hljs-string">&#x27;pangloss/vim-javascript&#x27;</span>, &#123; <span class="hljs-string">&#x27;for&#x27;</span> :[<span class="hljs-string">&#x27;javascript&#x27;</span>, <span class="hljs-string">&#x27;vim-plug&#x27;</span>] &#125;Plug <span class="hljs-string">&#x27;mattn/emmet-vim&#x27;</span><span class="hljs-comment">&quot;</span><span class="hljs-string">&quot; &quot;</span> PythonPlug <span class="hljs-string">&#x27;vim-scripts/indentpython.vim&#x27;</span><span class="hljs-comment">&quot;</span><span class="hljs-string">&quot; &quot;</span> Markdown<span class="hljs-comment">&quot;Plug &#x27;iamcco/markdown-preview.nvim&#x27;, &#123; &#x27;do&#x27;: &#123; -&gt; mkdp#util#install_sync()&#125;, &#x27;for&#x27; :[&#x27;markdown&#x27;, &#x27;vim-plug&#x27;] &#125;</span>Plug <span class="hljs-string">&#x27;iamcco/markdown-preview.nvim&#x27;</span>, &#123;<span class="hljs-string">&#x27;do&#x27;</span>: <span class="hljs-string">&#x27;cd app &amp;&amp; yarn install&#x27;</span> &#125;Plug <span class="hljs-string">&#x27;dhruvasagar/vim-table-mode&#x27;</span>, &#123; <span class="hljs-string">&#x27;on&#x27;</span>: <span class="hljs-string">&#x27;TableModeToggle&#x27;</span> &#125;Plug <span class="hljs-string">&#x27;vimwiki/vimwiki&#x27;</span><span class="hljs-comment">&quot;</span><span class="hljs-string">&quot; &quot;</span> BookmarksPlug <span class="hljs-string">&#x27;kshenoy/vim-signature&#x27;</span><span class="hljs-comment">&quot;</span><span class="hljs-string">&quot; &quot;</span> Other useful utilitiesPlug <span class="hljs-string">&#x27;terryma/vim-multiple-cursors&#x27;</span>Plug <span class="hljs-string">&#x27;junegunn/goyo.vim&#x27;</span> <span class="hljs-comment">&quot; distraction free writing mode</span>Plug <span class="hljs-string">&#x27;tpope/vim-surround&#x27;</span> <span class="hljs-comment">&quot; type ysks&#x27; to wrap the word with &#x27;&#x27; or type cs&#x27;`</span><span class="hljs-comment">&quot; to change &#x27;word&#x27; to `word`</span>Plug <span class="hljs-string">&#x27;godlygeek/tabular&#x27;</span> <span class="hljs-comment">&quot; type ;Tabularize /= to align the =</span>Plug <span class="hljs-string">&#x27;gcmt/wildfire.vim&#x27;</span> <span class="hljs-comment">&quot; in Visual mode, type i&#x27; to select all text in &#x27;&#x27;,</span><span class="hljs-comment">&quot; or type i) i] i&#125; ip</span>Plug <span class="hljs-string">&#x27;scrooloose/nerdcommenter&#x27;</span> <span class="hljs-comment">&quot; in &lt;space&gt;cc to comment a line</span><span class="hljs-comment">&quot;</span><span class="hljs-string">&quot; &quot;</span> DependenciesPlug <span class="hljs-string">&#x27;MarcWeber/vim-addon-mw-utils&#x27;</span>Plug <span class="hljs-string">&#x27;kana/vim-textobj-user&#x27;</span>Plug <span class="hljs-string">&#x27;fadein/vim-FIGlet&#x27;</span>Plug <span class="hljs-string">&#x27;vim-scripts/ctags.vim&#x27;</span><span class="hljs-comment">&quot; 静态代码分析</span><span class="hljs-comment">&quot;Plug &#x27;scrooloose/syntastic&#x27;</span><span class="hljs-comment">&quot; 文件搜索</span><span class="hljs-comment">&quot;Plug &#x27;kien/ctrlp.vim&#x27;</span><span class="hljs-keyword">call</span> plug#end()<span class="hljs-keyword">colorscheme</span> nord<span class="hljs-keyword">let</span> <span class="hljs-variable">g:lightline</span>=&#123;\<span class="hljs-string">&#x27;colorscheme&#x27;</span>:<span class="hljs-string">&#x27;nord&#x27;</span>,\&#125;<span class="hljs-comment">&quot;NERDTree</span><span class="hljs-keyword">map</span> tt :NERDTreeToggle<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">let</span> NERDTreeMapOpenExpl = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">let</span> NERDTreeMapUpdir = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">let</span> NERDTreeMapUpdirKeepOpen = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">let</span> NERDTreeMapOpenSplit = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">let</span> NERDTreeOpenVSplit = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">let</span> NERDTreeMapActivateNode = <span class="hljs-string">&quot;p&quot;</span><span class="hljs-keyword">let</span> NERDTreeMapOpenInTab = <span class="hljs-string">&quot;o&quot;</span><span class="hljs-keyword">let</span> NERDTreeMapPreview = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">let</span> NERDTreeMapCloseDir = <span class="hljs-string">&quot;n&quot;</span><span class="hljs-keyword">let</span> NERDTreeMapChangeRoot = <span class="hljs-string">&quot;y&quot;</span><span class="hljs-comment">&quot;</span><span class="hljs-comment">&quot;</span><span class="hljs-string">&quot; &quot;</span> ==<span class="hljs-string">&quot; &quot;</span> == NERDTree-git<span class="hljs-string">&quot; &quot;</span> ==<span class="hljs-keyword">let</span> <span class="hljs-variable">g:NERDTreeIndicatorMapCustom</span> = &#123;     \ <span class="hljs-string">&quot;Modified&quot;</span>  : <span class="hljs-string">&quot;✹&quot;</span>,         \ <span class="hljs-string">&quot;Staged&quot;</span>    : <span class="hljs-string">&quot;✚&quot;</span>,             \ <span class="hljs-string">&quot;Untracked&quot;</span> : <span class="hljs-string">&quot;✭&quot;</span>,                 \ <span class="hljs-string">&quot;Renamed&quot;</span>   : <span class="hljs-string">&quot;➜&quot;</span>,                     \ <span class="hljs-string">&quot;Unmerged&quot;</span>  : <span class="hljs-string">&quot;═&quot;</span>,                         \ <span class="hljs-string">&quot;Deleted&quot;</span>   : <span class="hljs-string">&quot;✖&quot;</span>,                             \ <span class="hljs-string">&quot;Dirty&quot;</span>     : <span class="hljs-string">&quot;✗&quot;</span>,                                 \ <span class="hljs-string">&quot;Clean&quot;</span>     : <span class="hljs-string">&quot;✔︎&quot;</span>,                                     \ <span class="hljs-string">&quot;Unknown&quot;</span>   : <span class="hljs-string">&quot;?&quot;</span>                                         \ &#125;<span class="hljs-comment">&quot;</span><span class="hljs-comment">&quot;</span><span class="hljs-string">&quot;                                         &quot;</span> ===<span class="hljs-string">&quot;                                         &quot;</span> === You Complete ME<span class="hljs-string">&quot;                                         &quot;</span> ===<span class="hljs-keyword">nnoremap</span> gd :YcmCompleter GoToDefinitionElseDeclaration<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">nnoremap</span> g/ :YcmCompleter GetDoc<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">nnoremap</span> gt :YcmCompleter GetType<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">nnoremap</span> <span class="hljs-keyword">gr</span> :YcmCompleter GoToReferences<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ycm_global_ycm_extra_conf</span>=<span class="hljs-string">&#x27;~/.ycm_extra_conf.py&#x27;</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ycm_confirm_extra_conf</span>= <span class="hljs-number">0</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">g:ycm_autoclose_preview_window_after_completion</span>=<span class="hljs-number">0</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ycm_autoclose_preview_window_after_insertion</span>=<span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ycm_use_clangd</span> = <span class="hljs-number">0</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ycm_python_interpreter_path</span> = <span class="hljs-string">&quot;/usr/lib/python3.8&quot;</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ycm_python_binary_path</span> = <span class="hljs-string">&quot;/usr/bin/python3.8&quot;</span><span class="hljs-comment">&quot; ===</span><span class="hljs-comment">&quot; === ale</span><span class="hljs-comment">&quot; ===</span><span class="hljs-keyword">let</span> <span class="hljs-variable">b:ale_linters</span> = [<span class="hljs-string">&#x27;pylint&#x27;</span>]<span class="hljs-keyword">let</span> <span class="hljs-variable">b:ale_fixers</span> = [<span class="hljs-string">&#x27;autopep8&#x27;</span>,<span class="hljs-string">&#x27;yapf&#x27;</span>]<span class="hljs-comment">&quot; ===</span><span class="hljs-comment">&quot; === Taglist</span><span class="hljs-comment">&quot; ===</span><span class="hljs-comment">&quot;map &lt;silent&gt; T:TagbarOpenAutoClose&lt;CR&gt;</span><span class="hljs-comment">&quot; ===</span><span class="hljs-comment">&quot; === MarkdownPreview</span><span class="hljs-comment">&quot; ===</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:mkdp_auto_start</span> = <span class="hljs-number">0</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:mkdp_auto_close</span> = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:mkdp_refresh_slow</span> = <span class="hljs-number">0</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:mkdp_command_for_global</span> = <span class="hljs-number">0</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:mkdp_open_to_the_world</span> = <span class="hljs-number">0</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:mkdp_open_ip</span> = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:mkdp_browser</span> = <span class="hljs-string">&#x27;firefox&#x27;</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:mkdp_echo_preview_url</span> = <span class="hljs-number">0</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:mkdp_browserfunc</span> = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:mkdp_preview_options</span> = &#123;    \ <span class="hljs-string">&#x27;mkit&#x27;</span>: &#123;&#125;,    \ <span class="hljs-string">&#x27;katex&#x27;</span>: &#123;&#125;,    \ <span class="hljs-string">&#x27;uml&#x27;</span>: &#123;&#125;,    \ <span class="hljs-string">&#x27;maid&#x27;</span>: &#123;&#125;,    \<span class="hljs-string">&#x27;disable_sync_scroll&#x27;</span>:<span class="hljs-number">0</span>,    \<span class="hljs-string">&#x27;sync_scroll_type&#x27;</span>:<span class="hljs-string">&#x27;middle&#x27;</span>,    \<span class="hljs-string">&#x27;hide_yaml_meta&#x27;</span>:<span class="hljs-number">1</span>\ &#125;<span class="hljs-keyword">let</span> <span class="hljs-variable">g:mkdp_markdown_css</span> = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:mkdp_highlight_css</span> = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:mkdp_port</span> = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:mkdp_page_title</span> = <span class="hljs-string">&#x27;「$&#123;name&#125;」&#x27;</span><span class="hljs-comment">&quot;===</span><span class="hljs-comment">&quot;===</span><span class="hljs-comment">&quot;vim-table-mode</span><span class="hljs-comment">&quot;===</span><span class="hljs-keyword">map</span> <span class="hljs-symbol">&lt;LEADER&gt;</span><span class="hljs-keyword">tm</span> :TableModeToggle<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-comment">&quot;===</span><span class="hljs-comment">&quot;===</span><span class="hljs-comment">&quot;Python-syntax</span><span class="hljs-comment">&quot;====</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:python_highlight_all</span> = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:python_slow_sync</span> = <span class="hljs-number">0</span><span class="hljs-comment">&quot;===</span><span class="hljs-comment">&quot;=== vim-indent-guide</span><span class="hljs-comment">&quot;===</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:indent_guides_guide_size</span> = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:indent_guides_start_level</span> = <span class="hljs-number">2</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:indent_guides_enable_on_vim_startup</span> = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:indent_guides_color_change_percent</span> = <span class="hljs-number">1</span>silent! <span class="hljs-keyword">unmap</span> <span class="hljs-symbol">&lt;LEADER&gt;</span>ig<span class="hljs-keyword">autocmd</span> WinEnter * silent! <span class="hljs-keyword">unmap</span> <span class="hljs-symbol">&lt;LEADER&gt;</span>ig<span class="hljs-comment">&quot;===</span><span class="hljs-comment">&quot;===Goyo</span><span class="hljs-comment">&quot;===</span><span class="hljs-keyword">map</span> <span class="hljs-symbol">&lt;LEADER&gt;</span>gy :Goyo<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-comment">&quot;===</span><span class="hljs-comment">&quot;===vim-signiture</span><span class="hljs-comment">&quot;===</span><span class="hljs-keyword">let</span> <span class="hljs-variable">g:SignatureMap</span>= &#123;        \<span class="hljs-string">&#x27;Leader&#x27;</span>:<span class="hljs-string">&quot;m&quot;</span>,        \<span class="hljs-string">&#x27;PlaceNextMark&#x27;</span>: <span class="hljs-string">&quot;m,&quot;</span>,        \<span class="hljs-string">&#x27;ToggleMarkAtLine&#x27;</span>:<span class="hljs-string">&quot;m.&quot;</span>,        \<span class="hljs-string">&#x27;PurgeMarksAtLine&#x27;</span>:<span class="hljs-string">&quot;dm-&quot;</span>,        \<span class="hljs-string">&#x27;DeleteMark&#x27;</span>:<span class="hljs-string">&quot;dm&quot;</span>,        \<span class="hljs-string">&#x27;PurgeMarks&#x27;</span>:<span class="hljs-string">&quot;dm/&quot;</span>,        \<span class="hljs-string">&#x27;PurgeMarkers&#x27;</span>:<span class="hljs-string">&quot;dm?&quot;</span>,\<span class="hljs-string">&#x27;GotoNextLineAlpha&#x27;</span>:<span class="hljs-string">&quot;m&lt;LEADER&gt;&quot;</span>,        \<span class="hljs-string">&#x27;GotoPrevLineAlpha&#x27;</span>: <span class="hljs-string">&quot;&quot;</span>,       \ <span class="hljs-string">&#x27;GotoNextSpotAlpha&#x27;</span>  :  <span class="hljs-string">&quot;m&lt;LEADER&gt;&quot;</span>,       \ <span class="hljs-string">&#x27;GotoPrevSpotAlpha&#x27;</span>  :  <span class="hljs-string">&quot;&quot;</span>,       \ <span class="hljs-string">&#x27;GotoNextLineByPos&#x27;</span>  :  <span class="hljs-string">&quot;&quot;</span>,       \ <span class="hljs-string">&#x27;GotoPrevLineByPos&#x27;</span>  :  <span class="hljs-string">&quot;&quot;</span>,       \ <span class="hljs-string">&#x27;GotoNextSpotByPos&#x27;</span>  :  <span class="hljs-string">&quot;mn&quot;</span>,       \ <span class="hljs-string">&#x27;GotoPrevSpotByPos&#x27;</span>  :  <span class="hljs-string">&quot;mp&quot;</span>,       \ <span class="hljs-string">&#x27;GotoNextMarker&#x27;</span>     :  <span class="hljs-string">&quot;&quot;</span>,       \ <span class="hljs-string">&#x27;GotoPrevMarker&#x27;</span>     :  <span class="hljs-string">&quot;&quot;</span>,       \ <span class="hljs-string">&#x27;GotoNextMarkerAny&#x27;</span>  :  <span class="hljs-string">&quot;&quot;</span>,       \ <span class="hljs-string">&#x27;GotoPrevMarkerAny&#x27;</span>  :  <span class="hljs-string">&quot;&quot;</span>,       \ <span class="hljs-string">&#x27;ListLocalMarks&#x27;</span>     :  <span class="hljs-string">&quot;m/&quot;</span>,       \ <span class="hljs-string">&#x27;ListLocalMarkers&#x27;</span>   :  <span class="hljs-string">&quot;m?&quot;</span>       \ &#125; <span class="hljs-comment">&quot;===</span> <span class="hljs-comment">&quot; === Undotree</span> <span class="hljs-comment">&quot; ===</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">g:undotree_DiffAutoOpen</span> = <span class="hljs-number">0</span><span class="hljs-comment">&quot; map L :UndotreeToggle&lt;CR&gt;</span><span class="hljs-comment">&quot; pythonmode</span><span class="hljs-string">&quot;let g:pymode_paths = [&quot;</span>/usr/lib/<span class="hljs-keyword">python3</span>.<span class="hljs-number">8</span><span class="hljs-comment">&quot;]</span><span class="hljs-string">&quot;let g:pymode_python = &quot;</span><span class="hljs-keyword">python3</span><span class="hljs-comment">&quot;</span><span class="hljs-comment">&quot;c-run</span><span class="hljs-keyword">map</span> <span class="hljs-symbol">&lt;F5&gt;</span> : <span class="hljs-keyword">call</span> CompileRunGcc()<span class="hljs-symbol">&lt;CR&gt;</span>func! CompileRunGcc()exec <span class="hljs-string">&quot;w&quot;</span><span class="hljs-keyword">if</span> &amp;<span class="hljs-keyword">filetype</span> == <span class="hljs-string">&#x27;c&#x27;</span>exec <span class="hljs-string">&quot;!g++ % -o %&lt;&quot;</span>exec <span class="hljs-string">&quot;!time ./%&lt;&quot;</span><span class="hljs-keyword">elseif</span> &amp;<span class="hljs-keyword">filetype</span> == <span class="hljs-string">&#x27;cpp&#x27;</span>exec <span class="hljs-string">&quot;!g++ % -o %&lt;&quot;</span>exec <span class="hljs-string">&quot;!time ./%&lt;&quot;</span><span class="hljs-keyword">elseif</span> &amp;<span class="hljs-keyword">filetype</span> == <span class="hljs-string">&#x27;java&#x27;</span> exec <span class="hljs-string">&quot;!javac %&quot;</span> exec <span class="hljs-string">&quot;!time java %&lt;&quot;</span><span class="hljs-keyword">elseif</span> &amp;<span class="hljs-keyword">filetype</span> == <span class="hljs-string">&#x27;sh&#x27;</span>:!time bash %<span class="hljs-keyword">elseif</span> &amp;<span class="hljs-keyword">filetype</span> == <span class="hljs-string">&#x27;python&#x27;</span>exec <span class="hljs-string">&quot;!time python2.7 %&quot;</span>    <span class="hljs-keyword">elseif</span> &amp;<span class="hljs-keyword">filetype</span> == <span class="hljs-string">&#x27;html&#x27;</span>        exec <span class="hljs-string">&quot;!firefox % &amp;&quot;</span>    <span class="hljs-keyword">elseif</span> &amp;<span class="hljs-keyword">filetype</span> == <span class="hljs-string">&#x27;go&#x27;</span>        exec <span class="hljs-string">&quot;!go build %&lt;&quot;</span>        exec <span class="hljs-string">&quot;!time go run %&quot;</span>    <span class="hljs-keyword">elseif</span> &amp;<span class="hljs-keyword">filetype</span> == <span class="hljs-string">&#x27;mkd&#x27;</span>        exec <span class="hljs-string">&quot;!~/.vim/markdown.pl % &gt; %.html &amp;&quot;</span>        exec <span class="hljs-string">&quot;!firefox %.html &amp;&quot;</span><span class="hljs-keyword">endif</span>endfunc</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>neovim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>避免眼高手低</title>
    <link href="/2020/10/16/%E9%81%BF%E5%85%8D%E7%9C%BC%E9%AB%98%E6%89%8B%E4%BD%8E%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2020/10/16/%E9%81%BF%E5%85%8D%E7%9C%BC%E9%AB%98%E6%89%8B%E4%BD%8E%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="如何避免自己成为眼高手低的人"><a href="#如何避免自己成为眼高手低的人" class="headerlink" title="如何避免自己成为眼高手低的人"></a>如何避免自己成为眼高手低的人</h1><ul><li>看看自己是否做到了有始有终</li></ul><p>做事不在于开始多少事情，而在于完成多少事情。眼高手低的人往往凡事停留在口头上，永远不会开始做。稍微好点的会开始做，但是不能坚持做完。</p><ul><li>看看自己每做一件，是否做到了比上一件事做得好</li></ul><p>如果自己没有做到，说明还有可以改进的空间，如果做到了，则说明自己的能力在提升，能做的事情越来越大。</p>]]></content>
    
    
    
    <tags>
      
      <tag>方法论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汉明码编码note</title>
    <link href="/2020/10/13/%E6%B1%89%E6%98%8E%E7%A0%81%E7%BC%96%E7%A0%81note/"/>
    <url>/2020/10/13/%E6%B1%89%E6%98%8E%E7%A0%81%E7%BC%96%E7%A0%81note/</url>
    
    <content type="html"><![CDATA[<p>最近在学习计算机组成原理，看了清华的课程，关于汉明码老师<br>只是简单地带过，因此我又研究了一下这一神奇的编码原理，不得不感叹汉明的聪明才智！</p><h1 id="编码目的"><a href="#编码目的" class="headerlink" title="编码目的"></a>编码目的</h1><p>当传输数据时，有各种原因可能会使数据出错，导致高层程序无法运行，这时如果我们采用一种编码方式能够检测错误<br>并且纠正错误，就能在底层解决这一问题，使得高层程序能正确运行</p><h1 id="检错原理"><a href="#检错原理" class="headerlink" title="检错原理"></a>检错原理</h1><h2 id="奇偶检验"><a href="#奇偶检验" class="headerlink" title="奇偶检验"></a>奇偶检验</h2><p>我们约定一串编码里1的个数是偶数个，那么这串编码里携带的信息就是对的，否则就是错的。</p><p>我们可以在开头对这串编码加一位校验码实现奇偶校验。</p><p>我们想传输10010这串码，那么在传输的时候，就传010010，其中在开头的0就是校验位。</p><p>我们想传输10000这串码，那么在传输的时候，就传110000，其中在开头的1就是校验位。</p><p>两个例子的1的个数都是偶数。</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><ol><li>发送者对数字进行分组</li><li>按位填写校验码并发送</li><li>接收者使用分组检测确定哪一位出错</li><li>出错位取反改正结果</li></ol><p><img src="https://i.loli.net/2020/10/13/kmPXcru9UYRxz4f.png" alt="汉明码.png"></p><p>本文主要对1.2.进行记录，汉明码的核心部分也在前两部分</p><h2 id="确定总位数"><a href="#确定总位数" class="headerlink" title="确定总位数"></a>确定总位数</h2><p>假设校验码一共k位，原始数据一共n位，校验码必须满足<br><a href="https://www.codecogs.com/eqnedit.php?latex=2^{k}>k&plus;n" target="_blank"><img src="https://latex.codecogs.com/gif.latex?2^{k}>k&plus;n" title="2^{k}>k+n" /></a><br>实际上计算时按第2的n次方位占据检验位，其余的都为原始数据即可</p><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>将数据的位置索引转为二进制数</p><p>也就是</p><p>第1个位置，变成第0001个位置；</p><p>第2个位置，变成第0010个位置；</p><p>第3个位置，变成第0011个位置；</p><p>第4个位置，变成第0100个位置；</p><p>第5个位置，变成第0101个位置；</p><p>第6个位置，变成第0110个位置;</p><p>…</p><p>位置在1,3,5,7,9,11的数据进到P1组。（你转换一下这些位置的二进制，就知道他们的位置符合XXX1）</p><p>位置在2,3,6,7,10,11的数据进到P2组。（位置符合XX1X）</p><p>位置在4,5,6,7的数据进到P3组。（位置符合X1XX）</p><p>位置在8,9,10,11的数据进到P4组。（位置符合1XXX）</p><p>第1，2，4，8位按照奇偶检验填写</p><p>发送给接收方</p><h2 id="接收方检测纠错"><a href="#接收方检测纠错" class="headerlink" title="接收方检测纠错"></a>接收方检测纠错</h2><ol><li>收到汉明码后首先按照P1,P2,P3分组</li><li>对每个组进行奇偶校验，正确的给0，错误的给1</li><li>把P按照从大到小排列起来，该串就是出错的数据的位置。</li><li>对该位数据取反完成改正 </li></ol><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><img src="https://i.loli.net/2020/10/13/HxA4MZJOLXacq3W.jpg" alt="汉明码例子.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>复杂网络相关研究</title>
    <link href="/2020/10/08/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%A0%94%E7%A9%B6/"/>
    <url>/2020/10/08/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="复杂网络的一些概念记录"><a href="#复杂网络的一些概念记录" class="headerlink" title="复杂网络的一些概念记录"></a>复杂网络的一些概念记录</h1><h2 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h2><p>邻接矩阵（Adjacency Matrix）是表示顶点之间相邻关系的矩阵。</p><p>矩阵中每一行代表一个点，行a即为点a，每一列代表某一行的点所指向的点，矩阵的每一个（小格）表示一条边。图中的所有边（指向性的箭头）带有权值，通常约定权值为0的边为不存在的边。</p><h2 id="关联矩阵"><a href="#关联矩阵" class="headerlink" title="关联矩阵"></a>关联矩阵</h2><p>关联矩阵（incidence matrix）是显示两类对象之间关系的矩阵。</p><p>矩阵中每一行代表一个点，行a即为点a，每一列代表某一条边，矩阵的每一个小格表示该点和边之间有连接关系。1则代表相连，0则代表不相连。</p><h2 id="拉普拉斯矩阵"><a href="#拉普拉斯矩阵" class="headerlink" title="拉普拉斯矩阵"></a>拉普拉斯矩阵</h2><p>拉普拉斯矩阵（Laplacian matrix）也称调和矩阵，是表示拉普拉斯算子的离散化，用矩阵来表示图。</p><p>矩阵中的每一行代表一个点，行a即为点a，每一列代表另一个点b，以下面三种情况进行判断赋值：</p><p>如果a = b，则该小格的值为deg(a)，即该点的度.</p><p>如果a != b,但a和b相连，则该小格的值为-1.</p><p>其他情况，改小格值为0.</p><h2 id="完全图"><a href="#完全图" class="headerlink" title="完全图"></a>完全图</h2><p>完全图是一个简单的无向图，其中每对不同的顶点之间都恰连有一条边相连。</p><ul><li>平均路径长度为 1</li><li>聚类系数为 1<br><a href="https://sm.ms/image/EX8Wlmn7pvueG29" target="_blank"><img src="https://i.loli.net/2020/10/09/EX8Wlmn7pvueG29.png" ></a></li></ul><h2 id="补图"><a href="#补图" class="headerlink" title="补图"></a>补图</h2><p>补图(complementary graph),一个图G的补图（complement）或者反面（inverse）是一个图有着跟G相同的点，而且这些点之间有边相连当且仅当在G里面他们没有边相连。<br>通俗的来讲就是完全图Kn去除G的边集后得到的图Kn-G.</p><p>对于左边的图，先画出他的完全图，再删去原来图中的边，即可得到补图<br><a href="https://sm.ms/image/cLmDu4NYd62Zwos" target="_blank"><img src="https://i.loli.net/2020/10/09/cLmDu4NYd62Zwos.png" ></a></p><h2 id="接近中心性"><a href="#接近中心性" class="headerlink" title="接近中心性"></a>接近中心性</h2><p>在连通图中，节点的接近度中心度是网络中心度的度量，计算方式为<strong>该节点与图中所有其他节点之间的最短路径的长度之和的倒数</strong>。因此，一个节点越中心，它就越靠近所有其他节点。</p><h2 id="稠密图"><a href="#稠密图" class="headerlink" title="稠密图"></a>稠密图</h2><p>在数学中，稠密图是边数接近最大边数的图。相反，只有几条边的图是稀疏图。稀疏图和稠密图之间的区别相当模糊，并且取决于上下文。</p><h2 id="图的密度"><a href="#图的密度" class="headerlink" title="图的密度"></a>图的密度</h2><p>图的密度被定义为 边的数量/最大可能边数</p><p><a href="https://www.codecogs.com/eqnedit.php?latex=\frac{m}{n(n-1)/2}" target="_blank"><img src="https://latex.codecogs.com/gif.latex?\frac{m}{n(n-1)/2}" title="\frac{m}{n(n-1)/2}" /></a></p><h2 id="图的割集"><a href="#图的割集" class="headerlink" title="图的割集"></a>图的割集</h2><p>设S是G的边集E的一个子集，如果在连通图G中删除S的所有边．则G-S不连通，并且不存在S的真子集使G-S不连通，就称边集S是图G的一个割集。</p><p>通俗的说，如果移除某条边或点，原图G不再连通，则称该点或边为图的一个割集，但是一个割集的真子集不能是割集。</p><p>因为v3是点割集，因此{v1.v3}不能作为图的一个点割集</p><p><a href="https://sm.ms/image/WhsQdLDpFRkSBcZ" target="_blank"><img src="https://i.loli.net/2020/10/09/WhsQdLDpFRkSBcZ.png" ></a></p><h2 id="度相关系数"><a href="#度相关系数" class="headerlink" title="度相关系数"></a>度相关系数</h2><p>度相关系数(degree correlations)<br>度相关系数被定义为在图中随机取一个度为k时能够取到的概率p(k).<br><a href="https://sm.ms/image/lcx4QSkLnXTjARD" target="_blank"><img src="https://i.loli.net/2020/10/09/lcx4QSkLnXTjARD.jpg" ></a></p>]]></content>
    
    
    
    <tags>
      
      <tag>工作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理note</title>
    <link href="/2020/10/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86note/"/>
    <url>/2020/10/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86note/</url>
    
    <content type="html"><![CDATA[<h2 id="数据编码与表示"><a href="#数据编码与表示" class="headerlink" title="数据编码与表示"></a>数据编码与表示</h2><h3 id="需要在计算机中表示的对象"><a href="#需要在计算机中表示的对象" class="headerlink" title="需要在计算机中表示的对象"></a>需要在计算机中表示的对象</h3><ul><li><p>程序、整数、浮点数、字符串、逻辑值</p></li><li><p>通过编码表示</p><h3 id="表示方式"><a href="#表示方式" class="headerlink" title="表示方式"></a>表示方式</h3></li><li><p>用数字电路的两个状态表示，存放在机器字中</p></li><li><p>由上一层的抽象计算机来识别不同的内容</p><blockquote><p>当数据已经固定位数为n了，最多只能有2的n次方个不同的组合，2的n次方个组合显然不能够满足不同的表示方法，因此计算机引入了语义和上下文<br>根据不同的上下文，同一个二进制组合可以表示成不同的对象<br>并且由上一层抽象计算机对其进行识别</p></blockquote><h3 id="编码原则"><a href="#编码原则" class="headerlink" title="编码原则"></a>编码原则</h3></li><li><p>少量简单的基本符号</p></li><li><p>一定的规则</p></li><li><p>表示大量复杂的信息</p></li><li><p>方便使用</p><h3 id="编码表示"><a href="#编码表示" class="headerlink" title="编码表示"></a>编码表示</h3></li><li><p>基本元素</p><ul><li>0、1两个基本符号</li></ul></li><li><p>字符</p><ul><li><p>26个字母=&gt;5位</p></li><li><p>大/小写 + 其他符号 =&gt;7bits(in 8)</p></li><li><p>世界上其它语言的文字 =&gt;16 bits(unicode)</p><ul><li><p>无符号整数</p></li><li><p>逻辑值</p></li><li><p>0 -&gt;False</p></li><li><p>1 -&gt;True</p></li><li><p>颜色</p></li><li><p>位置/地址/指令</p></li></ul></li></ul></li></ul><h3 id="逻辑型数据"><a href="#逻辑型数据" class="headerlink" title="逻辑型数据"></a>逻辑型数据</h3><h4 id="数据表示"><a href="#数据表示" class="headerlink" title="数据表示"></a>数据表示</h4><p> 1、0</p><h4 id="数据运算"><a href="#数据运算" class="headerlink" title="数据运算"></a>数据运算</h4><p> 与、或、非</p><h3 id="字符型数据"><a href="#字符型数据" class="headerlink" title="字符型数据"></a>字符型数据</h3><ul><li><p>重要的人机界面</p><ul><li>由符号则称</li><li>为每个符号进行编码，<strong>由输入/输出设备进行转换</strong></li><li>一般以字符串的形式在计算机存储器中存放</li></ul></li><li><p>字符集编码标准</p><ul><li><p>计算机之间进行信息交互的基础</p><ul><li>ASCII</li><li>UNICODE</li><li>UTF-8<h4 id="ASCII字符编码"><a href="#ASCII字符编码" class="headerlink" title="ASCII字符编码"></a>ASCII字符编码</h4><ul><li>American Standard Code for Information Interchange</li><li>采用7位二进制编码，占用一个字节</li><li>表示128个西文字符<h4 id="UNICODE编码"><a href="#UNICODE编码" class="headerlink" title="UNICODE编码"></a>UNICODE编码</h4></li><li>使用16位表示一个字符，可以表示65536个字符</li><li>将整个编码空间划分为块，每块为16的整数倍，按块进行分配</li><li>保留6400个码点供本地化使用</li><li>依然无法覆盖所有字符<h4 id="UTF-8编码"><a href="#UTF-8编码" class="headerlink" title="UTF-8编码"></a>UTF-8编码</h4></li><li><strong>变长字符编码</strong>，提高存储空间利用率</li><li>字符长度由首字节确定</li><li>字符首字节外，均以‘10’开始，可自同步</li><li>可扩展性强</li><li>成为互联网上占统治地位的字符集<h4 id="数值型数据表示"><a href="#数值型数据表示" class="headerlink" title="数值型数据表示"></a>数值型数据表示</h4></li><li>定点数</li></ul></li></ul><p>-小数点位置固定</p><ul><li>整数</li><li>定点小数</li><li>浮点数<h3 id="数值范围和数据精度"><a href="#数值范围和数据精度" class="headerlink" title="数值范围和数据精度"></a>数值范围和数据精度</h3></li><li>数值范围<blockquote><p>数值范围是指一种类型的数据所能表示的最大值和最小值</p></blockquote></li><li>数据精度<blockquote><p>实数所能给出的有效数字位数。对浮点数，精度不够会造成误差</p></blockquote></li></ul></li></ul></li></ul><h3 id="二进制整数的进位表示法"><a href="#二进制整数的进位表示法" class="headerlink" title="二进制整数的进位表示法"></a>二进制整数的进位表示法</h3><p>表示有符号的整数</p><ul><li>需要有1位表示符号<ul><li>最高位</li><li>0表示正数，1表示负数</li></ul></li><li>其他位表示数据</li></ul><h3 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h3><p>正数的原码、反码、补码表示均相同</p><p>零的原码和反码均有两个编码，补码只有一个码</p><p>负数的原码、反码、补码表示均不同，符号位为1，数值位：</p><ul><li>原码为数的绝对值</li><li>反码为每一位均取反码</li><li>补码为反码再在最低位+1</li></ul><h3 id="检错纠错码"><a href="#检错纠错码" class="headerlink" title="检错纠错码"></a>检错纠错码</h3><p>数据或编码在存储、传输等过程中可能出错</p><ul><li><p>判断出错</p><ul><li>比较：与所有正确的编码进行比较</li><li>特征比较：用一部分编码保存正确编码的特征，用来检验是否存在错误</li><li>计算机通常对一位错误进行检错纠错，对两位错误进行检错，有三位错误说明硬件出现问题</li></ul></li></ul><h4 id="码距"><a href="#码距" class="headerlink" title="码距"></a>码距</h4><p>指任意两个合法码之间至少有几个二进制位不同。</p><p>若用4个二进制位表示8种合法状态，就可以只用其中的8个编码来表示<br>，把另外8种作为非法编码，此时可以使合法码的码距为2.如果一个码字中<br>的任何一位出错后都会成为非法码，这样就具有了发现一位出错的能力</p><h4 id="常用的检错纠错码"><a href="#常用的检错纠错码" class="headerlink" title="常用的检错纠错码"></a>常用的检错纠错码</h4><ul><li>奇偶校验码：用于并行数据传送</li><li>汉明检验码：用于并行数据传送</li><li>循环冗余校验码： 用于串行数据传送</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux下搭建v2ray科学上网</title>
    <link href="/2020/10/01/linux%E4%B8%8B%E6%90%AD%E5%BB%BAv2ray%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <url>/2020/10/01/linux%E4%B8%8B%E6%90%AD%E5%BB%BAv2ray%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>寒假配置了一台manjaro，但是由于GitHub经常进不去，包括wget一些代码时速度很慢，为了更加方便地上网，特地配置v2ray。</p><h1 id="wget-v2ray和Qv2ray"><a href="#wget-v2ray和Qv2ray" class="headerlink" title="wget v2ray和Qv2ray"></a>wget v2ray和Qv2ray</h1><pre><code class="hljs apache"><span class="hljs-comment"># v2ray</span><span class="hljs-attribute">wget</span> https://github.com/v<span class="hljs-number">2</span>ray/v<span class="hljs-number">2</span>ray-core/releases/download/v<span class="hljs-number">4</span>.<span class="hljs-number">27</span>.<span class="hljs-number">0</span>/v<span class="hljs-number">2</span>ray-linux-<span class="hljs-number">64</span>.zip<span class="hljs-comment"># Qv2ray</span><span class="hljs-attribute">wget</span> https://github.com/Qv<span class="hljs-number">2</span>ray/Qv<span class="hljs-number">2</span>ray/releases/download/v<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">3</span>/Qv<span class="hljs-number">2</span>ray.v<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">3</span>.linux-x<span class="hljs-number">64</span>.AppImage</code></pre><h1 id="解压v2ray"><a href="#解压v2ray" class="headerlink" title="解压v2ray"></a>解压v2ray</h1><pre><code class="hljs apache"><span class="hljs-attribute">unzip</span> v<span class="hljs-number">2</span>ray-linux-<span class="hljs-number">64</span>.zip</code></pre><h1 id="添加运行权限然后运行v2ray"><a href="#添加运行权限然后运行v2ray" class="headerlink" title="添加运行权限然后运行v2ray"></a>添加运行权限然后运行v2ray</h1><pre><code class="hljs stylus">chmod +x Qv2ray<span class="hljs-selector-class">.v2</span>.<span class="hljs-number">6.3</span><span class="hljs-selector-class">.linux-x64</span>.AppImage./Qv2ray<span class="hljs-selector-class">.v2</span>.<span class="hljs-number">6.3</span><span class="hljs-selector-class">.linux-x64</span>.AppImage</code></pre><h1 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h1><p>进入首选项-内核设置配置可执行文件路径和资源目录<br><img src="https://i.loli.net/2020/10/05/6gCNOSQliraeWZc.png" alt="配置文件路径" title="配置文件路径"></p><h1 id="添加订阅链接"><a href="#添加订阅链接" class="headerlink" title="添加订阅链接"></a>添加订阅链接</h1><p><img src="https://i.loli.net/2020/10/05/xDPkfcaJHMqNbpX.png" alt="添加订阅链接" title="添加订阅链接"></p><h1 id="error"><a href="#error" class="headerlink" title="error!"></a>error!</h1><p>出现如下错误修改系统时间即可<br><img src="https://i.loli.net/2020/10/05/ahq6mUrJtoO9STI.png" alt="出现错误" title="error"></p><pre><code class="hljs css"><span class="hljs-selector-tag">sudo</span> <span class="hljs-selector-tag">date</span> <span class="hljs-selector-tag">-s</span> &quot;20201001 08<span class="hljs-selector-pseudo">:23</span><span class="hljs-selector-pseudo">:00&quot;</span> <span class="hljs-selector-id">#yyyymmdd</span> <span class="hljs-selector-tag">hh</span><span class="hljs-selector-pseudo">:mm</span><span class="hljs-selector-pseudo">:ss</span></code></pre><p><img src="https://i.loli.net/2020/10/05/erMwj7OFfiVqKJ2.png" alt="修改系统时间" title="修改系统时间"></p><h1 id="alias-添加快速启动命令"><a href="#alias-添加快速启动命令" class="headerlink" title="alias 添加快速启动命令"></a>alias 添加快速启动命令</h1><pre><code class="hljs apache"><span class="hljs-attribute">alias</span> vpn /home/wlz/qv<span class="hljs-number">2</span>ray/Qv<span class="hljs-number">2</span>ray.v<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">3</span>.linux-x<span class="hljs-number">64</span>.AppImage<span class="hljs-attribute">funcsave</span> vpn</code></pre><p><img src="https://i.loli.net/2020/10/05/UqTzSOwx7QarGAg.png" alt="配置启动命令" title="配置启动命令"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中秋快乐</title>
    <link href="/2020/09/30/%E4%B8%AD%E7%A7%8B%E5%BF%AB%E4%B9%90/"/>
    <url>/2020/09/30/%E4%B8%AD%E7%A7%8B%E5%BF%AB%E4%B9%90/</url>
    
    <content type="html"><![CDATA[<h1 id="中秋快乐！"><a href="#中秋快乐！" class="headerlink" title="中秋快乐！"></a>中秋快乐！</h1><h2 id="今天一天都是关于吃的"><a href="#今天一天都是关于吃的" class="headerlink" title="今天一天都是关于吃的"></a>今天一天都是关于吃的</h2><p><img src="https://i.loli.net/2020/10/05/Hulwr5hmGqtg1Y9.jpg" alt="学姐剥的柚子和送的月饼" title="食物.1"><br>学姐剥的柚子和送的月饼，很感谢学姐！<br><img src="https://i.loli.net/2020/10/05/c47tWuk6Di2Eq9x.jpg" alt="老妈寄的月饼" title="食物.2"><br>老妈寄的月饼，超级感动！<br><img src="https://i.loli.net/2020/10/05/IExnuhPOma6QBlY.jpg" alt="舍友妈妈寄的炒肉" title="食物.3"><br>舍友妈妈寄的炒肉，肉干是炒好后然后真空封装的，超nice</p><p>然后就是祝xdm节日快乐，中秋国庆假期快乐！</p>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020.9.29</title>
    <link href="/2020/09/29/2020-9-29/"/>
    <url>/2020/09/29/2020-9-29/</url>
    
    <content type="html"><![CDATA[<p>只知道昨晚下了一夜的雨，昨晚不知不觉中盖了两条被子，早上一觉起来看一眼天气预报，剩下十二度。<br><img src="https://i.loli.net/2020/10/05/OfwBJt3azPqQgy6.png" alt="天气" title="天气"><br>昨天还在短袖短裤，今天就该换上秋裤了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>networkx复杂网络基本操作</title>
    <link href="/2020/09/27/networkx%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <url>/2020/09/27/networkx%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>从寒假开始到疫情结束一直在研究复杂网络的算法，因此学习了networkx用于写算法，在这篇博文下整理一些networkx的基本操作</p><h1 id="networkx基本操作"><a href="#networkx基本操作" class="headerlink" title="networkx基本操作"></a>networkx基本操作</h1><h2 id="导入数据集"><a href="#导入数据集" class="headerlink" title="导入数据集"></a>导入数据集</h2><p>导入.gml格式的数据集</p><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">G</span>.</span></span>read<span class="hljs-constructor">_gml()</span></code></pre><p>导入.txt格式的数据集</p><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">G</span>.</span></span>read<span class="hljs-constructor">_edgelist()</span></code></pre><p>导入karate_club数据集（networkx自带）</p><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">G</span>.</span></span>karate<span class="hljs-constructor">_club_graph()</span></code></pre><h2 id="点和边的操作"><a href="#点和边的操作" class="headerlink" title="点和边的操作"></a>点和边的操作</h2><p>输出点的数量</p><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">G</span>.</span></span>number<span class="hljs-constructor">_of_nodes()</span></code></pre><p>输出边的数量</p><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">G</span>.</span></span>number<span class="hljs-constructor">_of_edges()</span></code></pre><p>输出全部点的信息</p><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">G</span>.</span></span>nodes<span class="hljs-literal">()</span></code></pre><p>输出全部边的信息</p><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">G</span>.</span></span>edges<span class="hljs-literal">()</span></code></pre><p>在图中添加一个点</p><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">G</span>.</span></span>add<span class="hljs-constructor">_node(34)</span></code></pre><p>在图中添加一条边</p><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">G</span>.</span></span>add<span class="hljs-constructor">_edge(1,3)</span></code></pre><p>输出某个点的邻居节点</p><pre><code class="hljs angelscript">G[<span class="hljs-number">34</span>]</code></pre><p>使用遍历输出所有点的邻居数量</p><pre><code class="hljs matlab"><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> in G.nodes():  print(<span class="hljs-built_in">i</span>,<span class="hljs-string">&#x27;的数量为&#x27;</span>,len(G[<span class="hljs-built_in">i</span>]))</code></pre><h2 id="画图操作"><a href="#画图操作" class="headerlink" title="画图操作"></a>画图操作</h2><p>networkx画图操作依托于matplotlib，因此matplotlib设置的参数对nx.draw()都有效</p><pre><code class="hljs angelscript"><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot as pyplotplt.figure(figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">8</span>))# 定义图片的大小nx.draw(G)plt.show()</code></pre><p>如下图画出了karate的拓扑图<br><img src="http://i1.fuimg.com/727535/bc6dfba58eb1265a.png" alt="karate" title="karate拓扑结构.1"></p><pre><code class="hljs 1c">nx.draw(G,node_color=&#x27;r&#x27;,edge_color=&#x27;b&#x27;)<span class="hljs-meta">#指定点和边的颜色</span></code></pre><p><img src="http://i1.fuimg.com/727535/40e48e4e44925b81.png" alt="karate" title="karate拓扑结构.2"></p><pre><code class="hljs nix"><span class="hljs-comment"># 使用Kernighan–Lin算法将图划分为两个块</span><span class="hljs-attr">a=kernighan_lin_bisection(G)#</span> 运行算法<span class="hljs-attr">pos</span> = nx.spring_layout(G)<span class="hljs-comment"># 对节点布局进行美化</span><span class="hljs-comment"># 分别画出两组社区的节点分布</span>nx.draw(G,<span class="hljs-attr">pos</span> = pos, <span class="hljs-attr">nodelist</span> = a[<span class="hljs-number">0</span>], <span class="hljs-attr">node_color</span> = &#x27;blue&#x27;,<span class="hljs-attr">node_size=100)</span>nx.draw(G,<span class="hljs-attr">pos</span> = pos, <span class="hljs-attr">nodelist</span> = a[<span class="hljs-number">1</span>], <span class="hljs-attr">node_color</span> = &#x27;red&#x27;,<span class="hljs-attr">node_size=100)</span></code></pre><p><img src="http://i2.tiimg.com/727535/f7135e3a3a576499.png" alt="karate" title="karate拓扑结构.3"></p><h2 id="生成其他特殊图"><a href="#生成其他特殊图" class="headerlink" title="生成其他特殊图"></a>生成其他特殊图</h2><pre><code class="hljs ini"><span class="hljs-attr">G</span> = nx.scale_free_graph(<span class="hljs-number">100</span>)<span class="hljs-comment"># 生成无标度网络</span><span class="hljs-attr">H</span>=nx.watts_strogatz_graph(<span class="hljs-number">50</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0.3</span>)<span class="hljs-comment"># 生成小世界</span></code></pre><h2 id="导出到-gml格式"><a href="#导出到-gml格式" class="headerlink" title="导出到.gml格式"></a>导出到.gml格式</h2><pre><code class="hljs less"><span class="hljs-selector-tag">nx</span><span class="hljs-selector-class">.write_gml</span>(G,<span class="hljs-string">&#x27;./9.txt&#x27;</span>)</code></pre><h2 id="其他详细方法参考networkx文档"><a href="#其他详细方法参考networkx文档" class="headerlink" title="其他详细方法参考networkx文档"></a>其他详细方法参考networkx文档</h2><p><a href="https://www.osgeo.cn/networkx/" title="networkx文档">networkx文档</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>复杂网络</tag>
      
      <tag>networkx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大数据课程设计-spark环境搭建以及实现决策树学习</title>
    <link href="/2020/09/27/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1-spark%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%AE%9E%E7%8E%B0%E5%86%B3%E7%AD%96%E6%A0%91%E5%AD%A6%E4%B9%A0/"/>
    <url>/2020/09/27/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1-spark%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%AE%9E%E7%8E%B0%E5%86%B3%E7%AD%96%E6%A0%91%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>学期初大数据课程老师要求仿照林子雨老师的教材使用spark编写程序，本想随便画两张图草草了事，但最后还是认真地做了。<br>有趣的是答辩的时候，有四组的作品和林子雨老师教材的例子一模一样，这大概就是糊弄学的典范吧。</p><h1 id="大数据课程设计-spark环境搭建以及实现决策树学习"><a href="#大数据课程设计-spark环境搭建以及实现决策树学习" class="headerlink" title="大数据课程设计-spark环境搭建以及实现决策树学习"></a>大数据课程设计-spark环境搭建以及实现决策树学习</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>使用manjaro、java 1.8、hadoop 2.9.2、 python 3.8<br>以及安装了mysql，此处不作展示<br><img src="https://i.loli.net/2020/10/05/pNY51TcBw49uHol.png" alt="Python和Spark版本信息" title="环境信息.1"><br><img src="https://i.loli.net/2020/10/05/91tSrjXaxN6zOpA.png" alt="JDK和Hadoop版本信息" title="环境信息.2"><br>spark可以独立于hadoop运行（hadoop配置是真的麻烦），并且本课设采用的是pyspark编程，pyspark需要python3.x以上的版本</p><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p><img src="https://i.loli.net/2020/10/05/qLHkJr5EVn32Yly.png" alt="数据集" title="数据集.1"><br>数据集采用国民经济核算季度数据，CPI为国家人均消费指数，指数越高说明消费水平越高，接下来将使用pyspark的ml模块的决策树模型进行训练和测试</p><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    导入必要的模块</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-keyword">from</span> pyspark.sql <span class="hljs-keyword">import</span> SparkSession<span class="hljs-keyword">from</span> pyspark.ml.feature <span class="hljs-keyword">import</span> VectorAssembler<span class="hljs-keyword">from</span> pyspark.ml.regression <span class="hljs-keyword">import</span> DecisionTreeRegressor<span class="hljs-keyword">from</span> pyspark.ml.evaluation <span class="hljs-keyword">import</span> RegressionEvaluator</code></pre><p>SparkSession 是 spark2.x 引入的新概念，SparkSession 为用户提供统一的切入点，字面理解是创建会话，或者连接 spark<br>VectorAssembler 将多列数据转换为单列的向量列并统一命名，完成特征向量提取<br>DecisionTreeRegressor 为决策树模型模块，包含了初始化训练测试等方法<br>RegressionEvaluator 用于对模型进行评估</p><pre><code class="hljs ini"><span class="hljs-attr">spark</span> = SparkSession.builder.appName(<span class="hljs-string">&#x27;learn_regression&#x27;</span>).master(<span class="hljs-string">&#x27;local[1]&#x27;</span>).getOrCreate()<span class="hljs-attr">dataset_path</span> = <span class="hljs-string">&#x27;./data/datat.csv&#x27;</span><span class="hljs-attr">df</span> = spark.read.csv(dataset_path)</code></pre><p>读取数据集并且创建本地spark会话</p><pre><code class="hljs reasonml">df = df.<span class="hljs-keyword">with</span><span class="hljs-constructor">Column(&#x27;<span class="hljs-params">_c1</span>&#x27;,<span class="hljs-params">df</span>.<span class="hljs-params">_c1</span>.<span class="hljs-params">astype</span>(<span class="hljs-string">&quot;float&quot;</span>)</span>)df = df.<span class="hljs-keyword">with</span><span class="hljs-constructor">Column(&#x27;<span class="hljs-params">_c2</span>&#x27;,<span class="hljs-params">df</span>.<span class="hljs-params">_c2</span>.<span class="hljs-params">astype</span>(<span class="hljs-string">&quot;float&quot;</span>)</span>)df = df.<span class="hljs-keyword">with</span><span class="hljs-constructor">Column(&#x27;<span class="hljs-params">_c3</span>&#x27;,<span class="hljs-params">df</span>.<span class="hljs-params">_c3</span>.<span class="hljs-params">astype</span>(<span class="hljs-string">&quot;float&quot;</span>)</span>)df = df.<span class="hljs-keyword">with</span><span class="hljs-constructor">Column(&#x27;<span class="hljs-params">_c4</span>&#x27;,<span class="hljs-params">df</span>.<span class="hljs-params">_c4</span>.<span class="hljs-params">astype</span>(<span class="hljs-string">&quot;float&quot;</span>)</span>)df = df.<span class="hljs-keyword">with</span><span class="hljs-constructor">Column(&#x27;<span class="hljs-params">_c5</span>&#x27;,<span class="hljs-params">df</span>.<span class="hljs-params">_c5</span>.<span class="hljs-params">astype</span>(<span class="hljs-string">&quot;float&quot;</span>)</span>)df = df.<span class="hljs-keyword">with</span><span class="hljs-constructor">Column(&#x27;<span class="hljs-params">_c6</span>&#x27;,<span class="hljs-params">df</span>.<span class="hljs-params">_c6</span>.<span class="hljs-params">astype</span>(<span class="hljs-string">&quot;float&quot;</span>)</span>)df = df.<span class="hljs-keyword">with</span><span class="hljs-constructor">Column(&#x27;<span class="hljs-params">_c7</span>&#x27;,<span class="hljs-params">df</span>.<span class="hljs-params">_c7</span>.<span class="hljs-params">astype</span>(<span class="hljs-string">&quot;float&quot;</span>)</span>)df = df.<span class="hljs-keyword">with</span><span class="hljs-constructor">Column(&#x27;<span class="hljs-params">_c8</span>&#x27;,<span class="hljs-params">df</span>.<span class="hljs-params">_c8</span>.<span class="hljs-params">astype</span>(<span class="hljs-string">&quot;float&quot;</span>)</span>)df = df.<span class="hljs-keyword">with</span><span class="hljs-constructor">Column(&#x27;<span class="hljs-params">_c9</span>&#x27;,<span class="hljs-params">df</span>.<span class="hljs-params">_c9</span>.<span class="hljs-params">astype</span>(<span class="hljs-string">&quot;float&quot;</span>)</span>)df = df.<span class="hljs-keyword">with</span><span class="hljs-constructor">Column(&#x27;<span class="hljs-params">_c10</span>&#x27;,<span class="hljs-params">df</span>.<span class="hljs-params">_c10</span>.<span class="hljs-params">astype</span>(<span class="hljs-string">&quot;float&quot;</span>)</span>)df = df.<span class="hljs-keyword">with</span><span class="hljs-constructor">Column(&#x27;<span class="hljs-params">_c11</span>&#x27;,<span class="hljs-params">df</span>.<span class="hljs-params">_c11</span>.<span class="hljs-params">astype</span>(<span class="hljs-string">&quot;float&quot;</span>)</span>)df = df.<span class="hljs-keyword">with</span><span class="hljs-constructor">Column(&#x27;<span class="hljs-params">_c12</span>&#x27;,<span class="hljs-params">df</span>.<span class="hljs-params">_c12</span>.<span class="hljs-params">astype</span>(<span class="hljs-string">&quot;float&quot;</span>)</span>)df = df.<span class="hljs-keyword">with</span><span class="hljs-constructor">Column(&#x27;<span class="hljs-params">_c13</span>&#x27;,<span class="hljs-params">df</span>.<span class="hljs-params">_c13</span>.<span class="hljs-params">astype</span>(<span class="hljs-string">&quot;float&quot;</span>)</span>)df = df.<span class="hljs-keyword">with</span><span class="hljs-constructor">Column(&#x27;<span class="hljs-params">_c14</span>&#x27;,<span class="hljs-params">df</span>.<span class="hljs-params">_c14</span>.<span class="hljs-params">astype</span>(<span class="hljs-string">&quot;float&quot;</span>)</span>)df.show<span class="hljs-literal">()</span></code></pre><p>将数据的每一列转换成float浮点数类型</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">feature_converter</span>(<span class="hljs-params">df</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        使用feature模块的VectorAssembler将特征值提取并合并</span><span class="hljs-string">    &quot;&quot;&quot;</span>    vecAss = VectorAssembler(inputCols = df.columns[<span class="hljs-number">1</span>:], outputCol= <span class="hljs-string">&#x27;features&#x27;</span>)    df_va = vecAss.transform(df)    <span class="hljs-keyword">return</span> df_va</code></pre><p>定义一个特征提取函数，将使用VectorAssembler提取特征值并合并重命名为features</p><pre><code class="hljs apache"><span class="hljs-attribute">train_data</span>, test_data = feature_converter(df).select(&#x27;features&#x27;,&#x27;_c<span class="hljs-number">14</span>&#x27;).randomSplit([<span class="hljs-number">7</span>.<span class="hljs-number">0</span>,<span class="hljs-number">3</span>.<span class="hljs-number">0</span>], <span class="hljs-number">101</span>)</code></pre><p>此处C_14为数据集中的CPI，特征提取完成后按照7-3划分训练集和测试集</p><h2 id="训练与评估"><a href="#训练与评估" class="headerlink" title="训练与评估"></a>训练与评估</h2><pre><code class="hljs routeros"><span class="hljs-comment"># 创建一个决策树对象</span>dt = DecisionTreeRegressor(<span class="hljs-attribute">maxDepth</span>=5, <span class="hljs-attribute">varianceCol</span>=<span class="hljs-string">&quot;variance&quot;</span>, <span class="hljs-attribute">labelCol</span>=<span class="hljs-string">&quot;_c14&quot;</span>)<span class="hljs-comment"># 使用训练集数据 进行训练</span>dt_model = dt.fit(train_data)</code></pre><p>使用ml模块的随机森林模型进行训练</p><pre><code class="hljs reasonml">dt_evaluator = <span class="hljs-constructor">RegressionEvaluator(<span class="hljs-params">labelCol</span>=&#x27;<span class="hljs-params">_c14</span>&#x27;,<span class="hljs-params">metricName</span>=<span class="hljs-string">&quot;rmse&quot;</span>,<span class="hljs-params">predictionCol</span>=&#x27;<span class="hljs-params">prediction</span>&#x27;)</span>rmse = dt_evaluator.evaluate(result)print(<span class="hljs-string">&quot;均方根的误差为：&quot;</span>,rmse)</code></pre><p>对模型进行评估，结果如下<br><img src="https://i.loli.net/2020/10/05/z4XNBOV1PhD3wC6.png" alt="评估结果" title="评估结果"></p>]]></content>
    
    
    
    <tags>
      
      <tag>spark</tag>
      
      <tag>hadoop</tag>
      
      <tag>大数据</tag>
      
      <tag>machine learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>helloworld</title>
    <link href="/2020/09/27/helloworld/"/>
    <url>/2020/09/27/helloworld/</url>
    
    <content type="html"><![CDATA[<p>welcome to my new blog, I will record my work here.</p>]]></content>
    
    
    
    <tags>
      
      <tag>杂</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
